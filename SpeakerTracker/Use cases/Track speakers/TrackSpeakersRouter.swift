//
//  TrackSpeakersRouter.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 25/10/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

@objc protocol TrackSpeakersRoutingLogic {
    func routeToSelectEntity(button: UIButton)
    func routeToSelectMeetingGroup(button: UIButton)
    func routeToSelectEvent(button: UIButton)
    func returnFromSelectingMeetingGroup()
    func returnFromSelectingEvent()
}

protocol TrackSpeakersDataPassing {
    var dataStore: TrackSpeakersDataStore? { get }
}

class TrackSpeakersRouter: NSObject, TrackSpeakersRoutingLogic, TrackSpeakersDataPassing {
    weak var viewController: TrackSpeakersViewController?
    var dataStore: TrackSpeakersDataStore?
    var selectMGAndEvtController: SelectMeetingGroupAndEventController?
    
  
  // MARK: Routing
  
    func routeToSelectEntity(button: UIButton) {
        if selectMGAndEvtController == nil {
            createSelectMtgAndEvtController()
        }
        selectMGAndEvtController?.displayEntityPopUp(button: button)
    }
    
    func routeToSelectMeetingGroup(button: UIButton) {
        if selectMGAndEvtController == nil {
            createSelectMtgAndEvtController()
        }
        selectMGAndEvtController?.displayMeetingGroupPopUp(button: button)
    }

    func routeToSelectEvent(button: UIButton) {
        if selectMGAndEvtController == nil {
            createSelectMtgAndEvtController()
        }
        selectMGAndEvtController?.displayEventPopUp(button: button)
    }
    
    func returnFromSelectingMeetingGroup() {
         selectMGAndEvtController = nil
        viewController!.updateAfterSelectingMeetingGroup()
    }
    
    func returnFromSelectingEvent() {
        selectMGAndEvtController = nil
        viewController!.updateAfterSelectingEvent()
    }
    
    // MARK: Data passing
    
    func passDataToSelectMeetingGroupAndEvent(source: TrackSpeakersDataStore, destination: inout SelectMeetingGroupAndEventDataStore) {
        destination.currentEntity = source.currentEntity
        destination.currentMeetingGroup = source.currentMeetingGroup
        destination.currentEvent = source.currentEvent
    }
    
    // MARK: Helpers
    
    func createSelectMtgAndEvtController() {
        selectMGAndEvtController = SelectMeetingGroupAndEventController(source: viewController!)
        var destinationDS = selectMGAndEvtController?.router?.dataStore
        passDataToSelectMeetingGroupAndEvent(source: dataStore!, destination: &destinationDS!)
    }
}
