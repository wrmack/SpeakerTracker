//
//  TrackSpeakersPresenter.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 14/09/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TrackSpeakersPresentationLogic {
    func presentNames(response: TrackSpeakers.Speakers.Response)
}

class TrackSpeakersPresenter: TrackSpeakersPresentationLogic {
    weak var viewController: TrackSpeakersDisplayLogic?

    // MARK: - VIP

    func presentNames(response: TrackSpeakers.Speakers.Response) {
        var remainingNames = [Int : [MemberNameWithTime]]()
        var waitingNames = [Int : [MemberNameWithTime]]()
        var speakingNames = [Int : [MemberNameWithTime]]()
        
        for item in response.remainingList! {
            let section = item.key
            for member in item.value {
                let memberName = ((member.firstName) ?? "") + " " + member.lastName!
                let memberNameWithTime = MemberNameWithTime(name: memberName, time: nil)
                if remainingNames[section] == nil {
                    remainingNames[section] = [MemberNameWithTime]()
                }
                remainingNames[section]!.append(memberNameWithTime)
            }
        }
        for item in response.waitingList! {
            let section = item.key
            for member in item.value {
                let memberName = (member.firstName ?? "") + " " + member.lastName!
                let memberNameWithTime = MemberNameWithTime(name: memberName, time: nil)
                if waitingNames[section] == nil {
                    waitingNames[section] = [MemberNameWithTime]()
                }
                waitingNames[section]!.append(memberNameWithTime)
            }
        }
        
        for item in response.speakingList! {
            let section = item.key
            for member in item.value {
                let memberName = member.firstName! + " " + member.lastName!
                var memberTime: String?
                if let spkrEvts = response.currentDebate?.debateSections![section].speakerEvents {
                    for event in spkrEvts {
                        if event.member == member {
                            let secondsString = String(format: "%02d", event.elapsedSeconds!)
                            let minutesString = String(format: "%02d", event.elapsedMinutes!)
                            memberTime = "\(minutesString):\(secondsString)"
                        }
                    }
                }
                let memberNameWithTime = MemberNameWithTime(name: memberName, time: memberTime)
                if speakingNames[section] == nil {
                    speakingNames[section] = [MemberNameWithTime]()
                }
                speakingNames[section]!.append(memberNameWithTime)
            }

        }

        
        let viewModel = TrackSpeakers.Speakers.ViewModel(remainingNames: remainingNames, waitingNames: waitingNames, speakingNames: speakingNames)
        viewController?.displayNames(viewModel: viewModel)
    }
}
