//
//  SelectMeetingGroupAndEventController.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 25/10/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit



class SelectMeetingGroupAndEventController: NSObject, EntitiesPopUpViewControllerDelegate, MeetingGroupsPopUpViewControllerDelegate, EventsPopUpViewControllerDelegate  {
    
    var interactor: SelectMeetingGroupAndEventBusinessLogic?
    var router: (NSObjectProtocol & SelectMeetingGroupAndEventRoutingLogic & SelectMeetingGroupAndEventDataPassing)?
    var source: TrackSpeakersViewController?
    
    
    // MARK: Object lifecycle
    convenience init(source: TrackSpeakersViewController) {
        self.init()
        self.source = source
        setup()
    }

    override init() {
        super.init()
    }
    
    deinit {
        print("SelectMeetingGroupAndEventController deinitialising")
    }

    
    // MARK: Setup

    private func setup() {
        let controller = self
        let interactor = SelectMeetingGroupAndEventInteractor()
        let router = SelectMeetingGroupAndEventRouter()
        controller.interactor = interactor
        controller.router = router
        router.controller = controller 
        router.dataStore = interactor
    }
    
    func displayEntityPopUp(button: UIButton) {
        let entityPopUpController = DisplayEntitiesPopUpViewController(nibName: nil, bundle: nil)
        entityPopUpController.modalPresentationStyle = .popover
        source!.present(entityPopUpController, animated: true, completion: nil)
        
        let popoverController = entityPopUpController.popoverPresentationController
        popoverController!.delegate = self as? UIPopoverPresentationControllerDelegate
        popoverController!.sourceView = button.superview!
        popoverController!.sourceRect =  CGRect(x: button.frame.origin.x, y: button.frame.origin.y, width: 300, height: button.frame.size.height)
        popoverController!.permittedArrowDirections = .up
        entityPopUpController.delegate = self
        entityPopUpController.reloadData()
    }

    func displayMeetingGroupPopUp(button: UIButton) {
        let currentEntity = getCurrentEntity()
        if currentEntity == nil {
            let alert = UIAlertController(title: "Meeting group not found", message: "Select an entity first", preferredStyle: .alert)
            alert.addAction(UIAlertAction(title: NSLocalizedString("OK", comment: "Default action"), style: .default, handler: { _ in
                NSLog("The \"OK\" alert occured.")
            }))
            source!.present(alert, animated: true, completion: nil)
        }
        else {
            let meetingGroupPopUpController = DisplayMeetingGroupsPopUpViewController(entity: currentEntity!)
            meetingGroupPopUpController.modalPresentationStyle = .popover
            source!.present(meetingGroupPopUpController, animated: true, completion: nil)
            
            let popoverController = meetingGroupPopUpController.popoverPresentationController
            popoverController!.delegate = self as? UIPopoverPresentationControllerDelegate
            popoverController!.sourceView = button.superview!
            popoverController!.sourceRect =  CGRect(x: button.frame.origin.x, y: button.frame.origin.y, width: 300, height: button.frame.size.height)
            popoverController!.permittedArrowDirections = .up
            meetingGroupPopUpController.delegate = self
        }
    }
    
    func displayEventPopUp(button: UIButton) {
        let entity = getCurrentEntity()
        let meetingGroup = getCurrentMeetingGroup()
        let eventPopUpController = DisplayEventsPopUpViewController(entity: entity!, meetingGroup: meetingGroup!)
//        eventPopUpController.includeTodayInEvents()
        eventPopUpController.modalPresentationStyle = .popover
        source!.present(eventPopUpController, animated: true, completion: nil)
        
        let popoverController = eventPopUpController.popoverPresentationController
        popoverController!.delegate = self as? UIPopoverPresentationControllerDelegate
        popoverController!.sourceView = button.superview!
        popoverController!.sourceRect = button.frame
        popoverController!.permittedArrowDirections = .any
        eventPopUpController.delegate = self
    }
    
    // MARK: - Datastore
    
    func setCurrentEntity(entity: Entity?) {
        interactor?.setCurrentEntity(entity: entity!)
    }
    
    func getCurrentEntity()-> Entity? {
        return interactor!.getCurrentEntity()
    }
    
    func setCurrentMeetingGroup(meetingGroup: MeetingGroup) {
        interactor?.setCurrentMeetingGroup(meetingGroup: meetingGroup)
    }
    
    func getCurrentMeetingGroup()->MeetingGroup? {
        return interactor!.getCurrentMeetingGroup()
    }

    func setCurrentEvent(event: Event) {
        interactor!.setCurrentEvent(event: event)
    }
    
    // MARK: - Router
    
    func returnToTrackSpeakersAfterSelectingMeetingGroup() {
        router?.returnToTrackSpeakersAfterSelectingMeetingGroup()
    }
    

    func returnToTrackSpeakersAfterSelectingEvent() {
        router?.returnToTrackSpeakersAfterSelectingEvent()
    }
    
    // MARK: - EntitiesPopUpViewControllerDelegate methods
    
    func didSelectEntityInPopUpViewController(_ viewController: DisplayEntitiesPopUpViewController, entity: Entity) {
        source!.dismiss(animated: false, completion: nil)
        source!.selectEntityButton.setTitle(entity.name, for: .normal)
        source!.selectEntityButton.setTitleColor(UIColor.white, for: .normal)
        source!.selectEntityButton.titleLabel?.textAlignment = .left
        source!.selectMeetingGroupButton.isEnabled = true
        setCurrentEntity(entity: entity)
    }
    
    
    // MARK: - MeetingGroupsPopUpViewControllerDelegate methods
    
    func didSelectMeetingGroupInPopUpViewController(_ viewController: DisplayMeetingGroupsPopUpViewController, meetingGroup: MeetingGroup) {
        setCurrentMeetingGroup(meetingGroup: meetingGroup)
        source!.dismiss(animated: false, completion: nil)
        source!.selectMeetingGroupButton.setTitle(meetingGroup.name, for: .normal)
        source!.selectMeetingGroupButton.setTitleColor(UIColor.white, for: .normal)
        source!.selectMeetingGroupButton.titleLabel?.textAlignment = .left
        source!.recordSwitch.isEnabled = true 
        source!.meetingGroupLabel.text = meetingGroup.name
        source!.meetingGroupLabel.textColor = UIColor(white: 0.94, alpha: 1.0)
        returnToTrackSpeakersAfterSelectingMeetingGroup()
    }
    
    
    // MARK: - EventsPopUpViewControllerDelegate methods
    
    func didSelectEventInPopUpViewController(_ viewController: DisplayEventsPopUpViewController, event: Event) {
        setCurrentEvent(event: event)
        source!.dismiss(animated: false, completion: nil)
        let formatter = DateFormatter()
        formatter.dateStyle = .none
        formatter.timeStyle = .short
        let timeString = formatter.string(from: event.date!)
        formatter.dateStyle = .long
        formatter.timeStyle = .none
        let dateString = formatter.string(from: event.date!)
        source!.selectEventButton.setTitle(timeString + ", " + dateString, for: .normal)
        source!.selectEventButton.setTitleColor(UIColor.white, for: .normal)
        source!.selectEventButton.titleLabel?.textAlignment = .left
        source!.recordingOnLabel.textColor = UIColor.red
        source!.eventRecordingIsOn = true
        returnToTrackSpeakersAfterSelectingEvent()
    }
    
}
