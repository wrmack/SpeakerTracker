//
//  TrackSpeakersModels.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 14/09/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// VIP model
enum TrackSpeakers {
    enum Speakers {
        struct Request {
        }
        struct Response {
            var remainingList: [Int : [Member]]?
            var waitingList: [Int : [Member]]?
            var speakingList: [Int : [SpeakingListMember]]?
        }
        struct ViewModel {
            var remainingNames: [Int : [MemberNameWithTime]]?
            var waitingNames: [Int : [MemberNameWithTime]]?
            var speakingNames: [Int : [MemberNameWithTime]]?
        }
    }
}


// Used by view controller to represent each table.
// Stores a reference to the table and a dictionary of members' names & recorded time (if any) where the key is the section number.
struct MembersTable {
    var tableView: UITableView?
    var nameDictionary: [Int : [MemberNameWithTime]]?
    init(tableView: UITableView?, nameDictionary: [Int : [MemberNameWithTime]]?) {
        self.tableView = tableView
        self.nameDictionary = nameDictionary
    }
}

struct SpeakingListMember {
    var member: Member?
    var elapsedMinutes: Int?
    var elapsedSeconds: Int?
    var speakingStatus = SpeakingStatus.notYetSpoken
    init(member: Member?, elapsedMinutes: Int?, elapsedSeconds: Int? ) {
        self.member = member
        self.elapsedMinutes = elapsedMinutes
        self.elapsedSeconds = elapsedSeconds
    }
}

// Contains the member's name and recorded speaking time (if any). Speaking time will be nil, except for members in the speaking table.
// Used by Presenter when creating view model and by view controller for storing table data for tableview delegate methods.
struct MemberNameWithTime {
    var name: String?
    var time: String?
    var speakingStatus = SpeakingStatus.notYetSpoken
    init(name: String?, time: String?) {
        self.name = name
        self.time = time
    }
}

enum SpeakingStatus {
    case notYetSpoken
    case isSpeaking
    case hasSpoken
}

// When a speaker is being timed, holds section, row and button reference.
struct SpeakerRecording {
    var section: Int?
    var row: Int?
    var button: UIButton?
}

// A stack of speaker movements
struct UndoStack {
    var speakerMovements: [SpeakerMovement]
}

// What we need to record when a speaker moves from one table to another.  These are stored in the UndoStack.
struct SpeakerMovement {
    var sourceTablePosition: TablePosition?
    var destinationTablePosition: TablePosition?
    var member: Member?
}

// Used in speaker movements.
struct TablePosition {
    var tableIndex: Int?
    var tableSection: Int?
    var tableRow: Int?
    init(tableIndex: Int?, tableSection: Int?, tableRow: Int?) {
        self.tableIndex = tableIndex
        self.tableSection = tableSection
        self.tableRow = tableRow
    }
}

// Used for tracking collapsed status of a section in the speaking table
struct SectionStatus {
    var isCollapsed = false
    var isAmendment = false
}

// Used for tracking whether a section of the speaking table is about the main motion or about an amendment
enum DebateMode {
    case mainMotion
    case amendment
}
