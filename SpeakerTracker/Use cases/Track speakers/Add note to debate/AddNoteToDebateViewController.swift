//
//  AddNoteToDebateViewController.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 3/11/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit



class AddNoteToDebateViewController: UIViewController {
    var interactor: AddNoteToDebateBusinessLogic?
    var router: (NSObjectProtocol & AddNoteToDebateRoutingLogic & AddNoteToDebateDataPassing)?
    var sourceVC: TrackSpeakersViewController?
    var noteTextView: UITextView?
    
    // MARK: Object lifecycle
    
    convenience init(source: TrackSpeakersViewController) {
        self.init()
        self.sourceVC = source
    }
    
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }


    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = AddNoteToDebateInteractor()
        let router = AddNoteToDebateRouter()
        viewController.interactor = interactor
        viewController.router = router
        router.viewController = viewController
        router.dataStore = interactor
    }


    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        
        // Appearance tweaks for view
        view.backgroundColor = UIColor.gray
        view.layer.cornerRadius = 20
        view.layer.maskedCorners =  [.layerMaxXMaxYCorner, .layerMinXMinYCorner, .layerMinXMaxYCorner, .layerMaxXMinYCorner]
        view.clipsToBounds = true
        
        // UITextview for adding notes
        noteTextView = UITextView()
        noteTextView!.backgroundColor = UIColor.white
        noteTextView!.layer.cornerRadius = 10
        noteTextView!.layer.masksToBounds = true
        noteTextView!.font = UIFont.systemFont(ofSize: 20)
        view.addSubview(noteTextView!)
        noteTextView!.translatesAutoresizingMaskIntoConstraints = false
        noteTextView!.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 10).isActive = true
        noteTextView!.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -10).isActive = true
        noteTextView!.topAnchor.constraint(equalTo: view.topAnchor, constant: 50).isActive = true
        noteTextView!.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: -10).isActive = true
        
        // Heading
        let heading = UILabel()
        heading.text = "Add a note for this debate"
        heading.textAlignment = .center
        heading.textColor = UIColor.black
        heading.font = UIFont.boldSystemFont(ofSize: 20)
        view.addSubview(heading)
        heading.translatesAutoresizingMaskIntoConstraints = false
        heading.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
        heading.topAnchor.constraint(equalTo: view.topAnchor, constant: 10).isActive = true
        
        // Close button
        let closeButton = UIButton(type: .system)
        closeButton.setTitle("X", for: .normal)
        closeButton.contentVerticalAlignment = .top
        closeButton.titleLabel?.font = UIFont.boldSystemFont(ofSize: 28)
        closeButton.setTitleColor(UIColor.black, for: .normal)
        closeButton.addTarget(self, action: #selector(closeButtonPressed(_:)), for: .touchUpInside)
        view.addSubview(closeButton)
        closeButton.translatesAutoresizingMaskIntoConstraints = false
        closeButton.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20).isActive = true
        closeButton.topAnchor.constraint(equalTo:view.topAnchor, constant: 0).isActive = true
        
        if let note = getDebateNote() {
            noteTextView!.text = note
        }
    }

    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)

    }

    func setDebateNote(note: String?) {
        interactor!.setDebateNote(note: note)
    }
    
    func getDebateNote() -> String?{
        return interactor!.getDebateNote()
    }
    
    
    
    
    @objc func closeButtonPressed(_ sender: UIButton) {
        if let note = noteTextView?.text {
            setDebateNote(note: note)
        }
        router!.returnToTrackSpeakersVC() 
    }
}
