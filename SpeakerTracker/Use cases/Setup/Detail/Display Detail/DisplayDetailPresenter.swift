//
//  DisplayDetailPresenter.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 6/09/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DisplayDetailPresentationLogic {
    func presentDetailFields(response: DisplayDetail.Detail.Response)
}

class DisplayDetailPresenter: DisplayDetailPresentationLogic {
    weak var viewController: DisplayDetailDisplayLogic?

    
    // MARK: - VIP
    
    /*
     Converts the selected item's properties into an array of title-detail tuples.
     Passes this array back to the view controller for displaying.
     */
    func presentDetailFields(response: DisplayDetail.Detail.Response) {
        let selectedItem = response.selectedItem
        var labelDetailArray = [(String, String)]()
        switch selectedItem {
        case is Member:
            let member = selectedItem as! Member
            labelDetailArray.append(("Title:", (member.title)!))
            labelDetailArray.append(("First name:", (member.firstName)!))
            labelDetailArray.append(("Last name:", (member.lastName)!))
            
        case is Entity:
            let entity = selectedItem as! Entity
            labelDetailArray.append(("Name:", entity.name!))
            if entity.meetingGroups != nil {
                var meetingGroupString = String()
                for sub in entity.meetingGroups! {
                    if meetingGroupString.count > 0 {
                        meetingGroupString.append(", ")
                    }
                    meetingGroupString.append(sub.name!)
                }
                labelDetailArray.append(("Meeting groups:", meetingGroupString))
            }
            if entity.members != nil {
                var memberString = String()
                for member in entity.members! {
                    if memberString.count > 0 {
                        memberString.append(", ")
                    }
                    memberString.append(member.firstName! + member.lastName!)
                }
                labelDetailArray.append(("Members:", memberString))
            }
            
        case is MeetingGroup:
            let meetingGroup = selectedItem as! MeetingGroup
            labelDetailArray.append(("Name:", meetingGroup.name!))
            if meetingGroup.members != nil {
                var memberString = String()
                for member in meetingGroup.members! {
                    if memberString.count > 0 {
                        memberString.append(", ")
                    }
                    memberString.append(member.firstName! + " " + member.lastName!)
                }
                labelDetailArray.append(("Members:", memberString))
            }
            
        case is Event:
            let event = selectedItem as! Event
            labelDetailArray.append(("Entity:", (event.entity?.name)!))
            labelDetailArray.append(("Meeting group:", (event.meetingGroup?.name)!))
            let formatter = DateFormatter()
            formatter.dateFormat = "dd MMM yyyy"
            let dateString = formatter.string(from: event.date!)
            labelDetailArray.append(("Date:", dateString))
            formatter.dateFormat = "hh:mm"
            let timeString = formatter.string(from: event.date!)
            labelDetailArray.append(("Time:", timeString))
            if event.meetingGroup!.members != nil {
                var memberString = String()
                for member in event.meetingGroup!.members! {
                    if memberString.count > 0 {
                        memberString.append(", ")
                    }
                    memberString.append(member.firstName! + " " + member.lastName!)
                }
                labelDetailArray.append(("Members:", memberString))
            }
            labelDetailArray.append(("Note:", event.note!))
        default:
            break
        }

        let viewModel = DisplayDetail.Detail.ViewModel(detailFields: labelDetailArray)
        viewController?.displayDetailFields(viewModel: viewModel)
    }
}
