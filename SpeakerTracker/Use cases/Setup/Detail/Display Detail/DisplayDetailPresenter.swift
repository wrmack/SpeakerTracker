//
//  DisplayDetailPresenter.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 6/09/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DisplayDetailPresentationLogic {
    func presentDetailFields(response: DisplayDetail.Detail.Response)
}

class DisplayDetailPresenter: DisplayDetailPresentationLogic {
    weak var viewController: DisplayDetailDisplayLogic?

    
    // MARK: - VIP
    
    /*
     Converts the selected item's properties into an array of title-detail tuples.
     Passes this array back to the view controller for displaying.
     */
    func presentDetailFields(response: DisplayDetail.Detail.Response) {
        let selectedItem = response.selectedItem
        var labelDetailArray = [(String, String)]()
        
        switch selectedItem!.type! {
            
        case SelectedItemType.member:
            guard let member = selectedItem!.member else {break}
            labelDetailArray.append(("Title:", (member.title ?? "")))
            labelDetailArray.append(("First name:", (member.firstName ?? "")))
            labelDetailArray.append(("Last name:", (member.lastName)!))
            
        case SelectedItemType.entity:
            guard let entity = selectedItem!.entity else {break}
            labelDetailArray.append(("Name:", entity.name!))
            if entity.meetingGroups != nil {
                var meetingGroupString = String()
                for sub in entity.meetingGroups! {
                    if meetingGroupString.count > 0 {
                        meetingGroupString.append(", ")
                    }
                    meetingGroupString.append(sub.name!)
                }
                labelDetailArray.append(("Meeting groups:", meetingGroupString))
            }
            if entity.members != nil {
                var memberString = String()
                for member in entity.members! {
                    if memberString.count > 0 {
                        memberString.append(", ")
                    }
                    var fullTitle: String?
                    if let title = member.title {
                        fullTitle = title + " "
                    }
                    memberString.append((fullTitle ?? "") + (member.firstName ?? "") + " " + member.lastName!)
                }
                labelDetailArray.append(("Members:", memberString))
            }
            
        case SelectedItemType.meetingGroup:
            guard let meetingGroup = selectedItem!.meetingGroup else {break}
            labelDetailArray.append(("Name:", meetingGroup.name!))
            var meetingGroupMembers = [Member]()
            if meetingGroup.memberIDs != nil {
                for memberID in (meetingGroup.memberIDs)! {
                    let mmbr = selectedItem!.entity!.members!.first(where: {$0.id == memberID })
                    meetingGroupMembers.append(mmbr!)
                }
            }
            if meetingGroupMembers.count > 0 {
                meetingGroupMembers.sort(by: {
                    if $0.lastName! < $1.lastName! {
                        return true
                    }
                    return false
                })
                var memberString = String()
                for member in meetingGroupMembers {
                    if memberString.count > 0 {
                        memberString.append(", ")
                    }
                    memberString.append((member.firstName ?? "") + " " + member.lastName!)
                }
                labelDetailArray.append(("Members:", memberString))
            }
            
        case SelectedItemType.event:
            guard let event = selectedItem!.event else { break}
            
            labelDetailArray.append(("Entity:", (event.entity?.name)!))
            labelDetailArray.append(("Meeting group:", (event.meetingGroup?.name)!))
            let formatter = DateFormatter()
            formatter.dateStyle = .long
            formatter.timeStyle = .none
            let dateString = formatter.string(from: event.date!)
            labelDetailArray.append(("Date:", dateString))
            formatter.dateStyle = .none
            formatter.timeStyle = .short
            let timeString = formatter.string(from: event.date!)
            labelDetailArray.append(("Time:", timeString))
            if event.meetingGroup!.memberIDs != nil {
                var meetingGroupMembers = [Member]()
                for memberID in (event.meetingGroup?.memberIDs)! {
                    let mmbr = event.entity?.members?.first(where: {$0.id == memberID })
                    meetingGroupMembers.append(mmbr!)
                }
                meetingGroupMembers.sort(by: {
                    if $0.lastName! < $1.lastName! {
                        return true
                    }
                    return false
                })
                var memberString = String()
                for member in meetingGroupMembers {
                    if memberString.count > 0 {
                        memberString.append(", ")
                    }
                    memberString.append((member.firstName ?? "") + " " + member.lastName!)
                }
                labelDetailArray.append(("Members:", memberString))
            }
            labelDetailArray.append(("Note:", event.note!))
        }

        let viewModel = DisplayDetail.Detail.ViewModel(detailFields: labelDetailArray)
        viewController?.displayDetailFields(viewModel: viewModel)
    }
}
