//
//  DisplayDetailInteractor.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 6/09/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DisplayDetailBusinessLogic {
    func getSelectedItemFields(request: DisplayDetail.Detail.Request)
    func getSelectedItem() -> AnyObject?
    func getCurrentEntity()-> Entity
    func setCurrentEntity(entity: Entity)
}

protocol DisplayDetailDataStore {
    var selectedItem: AnyObject? {get set }
    var currentEntity: Entity? {get set}
}

class DisplayDetailInteractor: DisplayDetailBusinessLogic, DisplayDetailDataStore {
    var presenter: DisplayDetailPresentationLogic?
    var selectedItem: AnyObject?
    var currentEntity: Entity?

    
    // MARK: - VIP
    
    /*
     The selected item was set through data-passing.
     Passes the selected item to the presenter for presenting as an array of title-detail tuples.
     */
    func getSelectedItemFields(request: DisplayDetail.Detail.Request) {
        if selectedItem! is MeetingGroup {
            var mtgGrp = selectedItem as! MeetingGroup
            var members = [Member]()
            if mtgGrp.memberIDs != nil {
                for id in mtgGrp.memberIDs! {
                    if let mmbr = currentEntity!.members?.first(where: {$0.id == id}) {
                        members.append(mmbr)
                    }
                }
            }
            mtgGrp.members = members
            selectedItem = mtgGrp as AnyObject
        }
        let response = DisplayDetail.Detail.Response(selectedItem: selectedItem)
        presenter?.presentDetailFields(response: response)
    }
    
    
    // MARK: - Datastore
    
    func getSelectedItem() -> AnyObject? {
        return selectedItem
    }
    
    func setCurrentEntity(entity: Entity) {
        currentEntity = entity
    }
    
    func getCurrentEntity()-> Entity {
        return currentEntity!
    }
}
