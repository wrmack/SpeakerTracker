//
//  RemoveMemberInteractor.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 10/09/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RemoveMemberBusinessLogic {
     func removeMember(callback: @escaping ()->())
}

protocol RemoveMemberDataStore {
    var entity: Entity? {get set}
    var member: Member? {get set}
}



class RemoveMemberInteractor: RemoveMemberBusinessLogic, RemoveMemberDataStore {
    var presenter: RemoveMemberPresentationLogic?
    var entity: Entity?
    var member: Member?

    
    // MARK: Do something

    func removeMember(callback: @escaping ()->()) {
        if member!.id != nil {
            if let idx = entity!.members?.firstIndex(where: {$0.id == member!.id}) {
                entity?.members!.remove(at: idx)
            }
        }
        else {
            if let idx = entity!.members?.firstIndex(where: {$0.lastName == member!.lastName}) {
                entity?.members!.remove(at: idx)
            }
        }
        guard let docDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first else {
            print("DisplayMembersInteractor: fetchMembers: error: Document directory not found")
            return
        }
        let docFileURL = docDirectory.appendingPathComponent((entity?.fileName)! + ".ent")
        let entityDoc = EntityDocument(fileURL: docFileURL)
        entityDoc.open(completionHandler: { success in
            if !success {
                print("DisplayMembersInteractor: fetchMembers: error opening EntityDocument")
            }
            else {
                if self.member!.id != nil {
                    if let idx = entityDoc.entity!.members?.firstIndex(where: {$0.id == self.member!.id}) {
                        entityDoc.entity?.members!.remove(at: idx)
                    }
                }
                else {
                    if let idx = entityDoc.entity!.members?.firstIndex(where: {$0.lastName == self.member!.lastName}) {
                        entityDoc.entity?.members!.remove(at: idx)
                    }
                }
                entityDoc.updateChangeCount(.done)
                entityDoc.close(completionHandler: { success in
                    print(entityDoc)
                    callback()
                })
            }
        })
    }
}
