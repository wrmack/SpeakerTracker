//
//  AddMemberInteractor.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 2/09/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AddMemberBusinessLogic {
    func saveMemberToEntity(member: Member, callback: @escaping ()->())
    func addMemberToTempList(member: Member)
}

protocol AddMemberDataStore {
    var entity: Entity? { get set }
}

class AddMemberInteractor: AddMemberBusinessLogic, AddMemberDataStore {
    var presenter: AddMemberPresentationLogic?
    var entity: Entity?
    var tempMemberList: [Member]?


    // MARK: Model management
    
    /*
     Saves member to model and persistent storage.
     Called when user decides to saves new member.
     tempMemberList is an array that is updated when user presses the "Add another" button, but is not saved until this is called.
     Also updates currenty entity in user defaults.
     */
    func saveMemberToEntity(member: Member, callback: @escaping ()->()) {
        if entity?.members == nil {
            entity?.members = [Member]()
        }

        if tempMemberList != nil && tempMemberList!.count > 0 {
            entity?.members?.append(contentsOf: tempMemberList!)
            tempMemberList = nil
        }
        
        let newMember = member
        if newMember.title != "" || newMember.firstName != "" || newMember.lastName != "" {
            entity?.members?.append(newMember)
        }
        let defaults = UserDefaults.standard
        if let currentEntityData = defaults.data(forKey: "CurrentEntity") {
            let savedEntity = try! JSONDecoder().decode(Entity.self, from: currentEntityData)
            if savedEntity == self.entity {
                let encodedEntity = try? JSONEncoder().encode(self.entity)
                defaults.set(encodedEntity, forKey: "CurrentEntity")
            }
        }
        guard let docDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first else {
            print("DisplayMembersInteractor: fetchMembers: error: Document directory not found")
            return
        }
        let docFileURL = docDirectory.appendingPathComponent((entity?.id?.uuidString)! + ".ent")
        let entityDoc = EntityDocument(fileURL: docFileURL)
        entityDoc.open(completionHandler: { success in
            if !success {
                print("DisplayMembersInteractor: fetchMembers: error opening EntityDocument")
            }
            else {
                entityDoc.entity = self.entity
                entityDoc.updateChangeCount(.done)
                entityDoc.close(completionHandler: { success in
                    print(entityDoc)
                    callback()
                })
            }
        })
    }
    
    
    func addMemberToTempList(member: Member) {
        if tempMemberList == nil { tempMemberList = [Member]()}
        tempMemberList?.append(member)
    }
 
}
