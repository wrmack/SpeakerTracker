//
//  AddMemberViewController.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 2/09/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit


class AddMemberViewController: UIViewController, EditMemberViewDelegate {
    var interactor: AddMemberBusinessLogic?
    var router: (NSObjectProtocol & AddMemberRoutingLogic & AddMemberDataPassing)?
    var sourceVC: DisplayMembersViewController?
    var editView: EditMemberView?

    // MARK: - Object lifecycle

    convenience init(sourceVC: DisplayMembersViewController) {
        self.init(nibName:nil, bundle: nil)
        self.sourceVC = sourceVC
    }
    
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }


    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: - Setup

    private func setup() {
        let viewController = self
        let interactor = AddMemberInteractor()
        let router = AddMemberRouter()
        viewController.interactor = interactor
        viewController.router = router
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: - Routing

//    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
//        if let scene = segue.identifier {
//            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
//            if let router = router, router.responds(to: selector) {
//                router.perform(selector, with: segue)
//            }
//        }
//    }

    
    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        editView = EditMemberView(frame: CGRect.zero)
        editView!.addAnotherButton!.isHidden = false
        editView!.infoLabel!.isHidden = false
        view.addSubview(editView!)
        editView!.headingLabel?.text = "Create a new member"
        editView!.translatesAutoresizingMaskIntoConstraints = false
        editView!.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
        editView!.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true
        editView!.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        editView!.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        editView?.delegate = self
        
        navigationItem.leftBarButtonItem = UIBarButtonItem(barButtonSystemItem: .cancel, target: self, action: #selector(cancelButtonTapped))
        navigationItem.rightBarButtonItem = UIBarButtonItem(barButtonSystemItem: .save, target: self, action: #selector(saveButtonTapped))
        navigationItem.rightBarButtonItem?.isEnabled = false
    }

    
    //MARK: - Button actions
    
    @objc private func saveButtonTapped() {
        var id: UUID?
        if editView!.member != nil {
            id = editView!.member?.id
        }
        else {id = UUID()}
        let editedMember = Member(title: editView!.titleBox?.text, firstName: editView!.firstNameBox?.text, lastName: editView!.lastNameBox?.text, id: id)
        interactor?.saveMemberToEntity(member: editedMember, callback: {
            self.router?.returnToSource(source: self.sourceVC!)
        })
    }
    
    
    @objc private func cancelButtonTapped() {
        self.router?.returnToSource(source: self.sourceVC!)
    }
    
    
    // MARK: - EditMemberViewDelegate methods
    
    func addAnother(member: Member?) {
        interactor!.addMemberToTempList(member: member!)
    }
    
    func enableSaveButton(enable: Bool) {
        navigationItem.rightBarButtonItem?.isEnabled = enable
    }
    
}
