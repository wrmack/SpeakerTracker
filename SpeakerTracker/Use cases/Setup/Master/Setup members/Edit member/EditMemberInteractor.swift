//
//  EditMemberInteractor.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 9/09/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EditMemberBusinessLogic {
    func getMember() -> Member?
    func saveMemberToEntity(member: Member, callback: @escaping ()->())
    func addMemberToBeDeletedToDataStore(member: Member)
}

protocol EditMemberDataStore {
    var entity: Entity? {get set}
    var member: Member? {get set}
}


class EditMemberInteractor: EditMemberBusinessLogic, EditMemberDataStore {
    var entity: Entity?
    var member: Member?

    
    // MARK: VIP
    
    /*
     Replace member already exists for in-memory entity, replace member with passed-in member.
     If the saved current entity is this one, update it.
     
     */
    func saveMemberToEntity(member: Member, callback: @escaping ()->()) {
        if entity!.members == nil {
            entity!.members = [Member]()
        }
        if let idx = entity!.members?.firstIndex(where: {$0.id == member.id}) {
            entity?.members![idx] = member
        }
        let savedEntity = UserDefaultsManager.getCurrentEntity()
        if savedEntity == self.entity {
            UserDefaultsManager.saveCurrentEntity(entity: self.entity!)
        }
        guard let docDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first else {
            print("DisplayMembersInteractor: fetchMembers: error: Document directory not found")
            return
        }
        let docFileURL = docDirectory.appendingPathComponent((entity?.id?.uuidString)! + ".ent")
        let entityDoc = EntityDocument(fileURL: docFileURL)
        entityDoc.open(completionHandler: { success in
            if !success {
                print("DisplayMembersInteractor: fetchMembers: error opening EntityDocument")
            }
            else {
                
                if entityDoc.entity!.members == nil {
                    entityDoc.entity!.members = [Member]()
                }
                if let idx = self.entity!.members?.firstIndex(where: {$0.id == member.id}) {
                    entityDoc.entity?.members![idx] = member
                }
                entityDoc.updateChangeCount(.done)
                entityDoc.close(completionHandler: { success in
                    print(entityDoc)
                    callback()
                })
            }
        })
    }
    
    // MARK: - Datastore
    
    func getMember() -> Member? {
        return self.member
    }
    
    func addMemberToBeDeletedToDataStore(member: Member) {
        self.member = member
    }
}
