//
//  DisplayMembersInteractor.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 2/09/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DisplayMembersBusinessLogic {
    func fetchMembers(request: DisplayMembers.Members.Request)
    func setCurrentMember(index: Int)
    func refreshMembers()
    func checkEntitiesExist()->Bool?
    func checkEntitySelected() ->Bool?
}

protocol DisplayMembersDataStore {
    var member: Member? {get set}
    var entity: Entity? {get set}
}


class DisplayMembersInteractor: DisplayMembersBusinessLogic, DisplayMembersDataStore {
    var presenter: DisplayMembersPresentationLogic?
    var entity: Entity?
    var member: Member?
    var members: [Member]?

    
    
    // MARK: VIP
    
    func fetchMembers(request: DisplayMembers.Members.Request) {
        self.members = [Member]()
        self.member = nil
        self.entity = request.entity
        self.members = request.entity?.members
        self.members?.sort(by: {
            if $0.lastName! < $1.lastName! {
                return true
            }
            return false
        })
        let response = DisplayMembers.Members.Response(members: self.members)
        self.presenter?.presentMembers(response: response)
    }
    
    
    func setCurrentMember(index: Int) {
        if members != nil && members!.count > 0 {
            member = members![index]
        }
        else {
            member = nil
        }
    }
    
    /*
     The datastore property entity is updated through data-passing
     This updates the members stored property and passes members to the presenter to prepare for display.
     */
    func refreshMembers() {
        self.members = entity?.members
        setCurrentMember(index: 0)
        let response = DisplayMembers.Members.Response(members: self.members)
        self.presenter?.presentMembers(response: response)
    }
    
    func checkEntitiesExist()->Bool? {
        guard let docDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first else {
            print("DisplayMembersInteractor: checkEntitiesExist: error: Document directory not found")
            return nil
        }
        do {
            let contents = try FileManager.default.contentsOfDirectory(at: docDirectory, includingPropertiesForKeys: nil, options: .skipsHiddenFiles)
            var exists = false
            if contents.count == 0 { return exists}
            for url in contents {
                if url.pathExtension == "ent" { exists = true }
            }
            return exists
        }
        catch {
            print(error)
            return nil
        }
    }
    
    func checkEntitySelected() ->Bool? {
        let isSelected = self.entity != nil ? true : false
        return isSelected
    }
}
