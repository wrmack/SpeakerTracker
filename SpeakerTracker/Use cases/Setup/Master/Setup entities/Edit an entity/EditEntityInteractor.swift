//
//  EditEntityInteractor.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 1/10/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EditEntityBusinessLogic {
    func getEntity() -> Entity?
    func saveEntity(entity: Entity, callback: @escaping ()->())
    func addEntityToBeDeletedToDataStore(entity: Entity)
}

protocol EditEntityDataStore {
    var entity: Entity? {get set}
}


class EditEntityInteractor: EditEntityBusinessLogic, EditEntityDataStore {
    var entity: Entity?

    
    // MARK: VIP
    
    /*
     If saved current entity is this one, then update the saved current entity.
     Open the entity document and update the entity property, then close the document.
     */
    func saveEntity(entity: Entity, callback: @escaping ()->()) {
        let savedEntity = UserDefaultsManager.getCurrentEntity()
        if savedEntity == self.entity {
            UserDefaultsManager.saveCurrentEntity(entity: self.entity!)
        }
        guard let docDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first else {
            print("EditEntityInteractor: saveEntity: error: Document directory not found")
            return
        }
        let docFileURL = docDirectory.appendingPathComponent((entity.id?.uuidString)! + ".ent")
        let entityDoc = EntityDocument(fileURL: docFileURL)
        entityDoc.open(completionHandler: { success in
            if !success {
                print("EditEntityInteractor: saveEntity: error opening EntityDocument")
            }
            else {
                entityDoc.entity = entity
                entityDoc.updateChangeCount(.done)
                entityDoc.close(completionHandler: { success in
//                    print(entityDoc)
                    callback()
                })
            }
        })
    }
    
    // MARK: - Datastore
    
    func getEntity() -> Entity? {
        return self.entity
    }
    
    func addEntityToBeDeletedToDataStore(entity: Entity) {
        self.entity = entity
    }
}
