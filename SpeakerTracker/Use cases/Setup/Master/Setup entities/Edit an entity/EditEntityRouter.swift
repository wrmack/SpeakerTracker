//
//  EditEntityRouter.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 1/10/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

@objc protocol EditEntityRoutingLogic {
    func returnToSource(source: DisplayEntitiesViewController)
    func navigateToRemoveEntity()
    func returnFromRemovingEntity()
}

protocol EditEntityDataPassing {
    var dataStore: EditEntityDataStore? { get }
}

class EditEntityRouter: NSObject, EditEntityRoutingLogic, EditEntityDataPassing {
    weak var viewController: EditEntityViewController?
    var dataStore: EditEntityDataStore?
    var removeVC: RemoveEntityController?
  
    
  // MARK: Routing
  
    func returnToSource(source: DisplayEntitiesViewController) {
        var destinationDS = source.router?.dataStore
        passDataToDisplayEntitiesDataStore(source: dataStore!, destination: &destinationDS!)
        source.router?.returnFromEditingEntity()
    }
    
    
    func navigateToRemoveEntity() {
        removeVC = RemoveEntityController(source: viewController!)
        var destinationDS = removeVC?.router?.dataStore
        passDataToRemoveEntityDataStore(source: dataStore!, destination: &destinationDS!)
        removeVC?.removeEntity()
    }
    
    
    func returnFromRemovingEntity() {
//        let source = viewController?.sourceVC
//        var destinationDS = source!.router?.dataStore
//        passDataToDisplayEntitiesDataStore(source: dataStore!, destination: &destinationDS!)
        returnToSource(source: viewController!.sourceVC!)
    }
    
    
    // MARK: Passing data
    
    func passDataToDisplayEntitiesDataStore(source: EditEntityDataStore, destination: inout DisplayEntitiesDataStore) {
        destination.entity = source.entity
    }
    
    
    func passDataToRemoveEntityDataStore(source: EditEntityDataStore, destination: inout RemoveEntityDataStore) {
        destination.entity = source.entity
    }
}
