//
//  EditEventViewController.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 6/10/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EditEventDisplayLogic: class {
//    func displaySomething(viewModel: EditEvent.Something.ViewModel)
}



class EditEventViewController: UIViewController, EditEventDisplayLogic {
    var interactor: EditEventBusinessLogic?
    var router: (NSObjectProtocol & EditEventRoutingLogic & EditEventDataPassing)?
    var editView: EditEventView?
    var sourceVC: DisplayEventsViewController?
    

    // MARK: Object lifecycle
    
    convenience init(sourceVC: DisplayEventsViewController) {
        self.init(nibName:nil, bundle: nil)
        self.sourceVC = sourceVC
    }

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }


    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = EditEventInteractor()
        let presenter = EditEventPresenter()
        let router = EditEventRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        editView = EditEventView(frame: CGRect.zero)
        view.addSubview(editView!)
        editView!.headingLabel?.text = "Edit an event"
        editView!.translatesAutoresizingMaskIntoConstraints = false
        editView!.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
        editView!.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true
        editView!.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        editView!.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        
        let space = UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.fixedSpace, target: nil, action: nil)
        space.width = 100
        
        let trashItem = UIBarButtonItem(barButtonSystemItem: .trash, target: self, action: #selector(deleteButtonTapped))
        trashItem.tintColor = UIColor.red
        navigationItem.leftBarButtonItem = UIBarButtonItem(barButtonSystemItem: .cancel, target: self, action: #selector(cancelButtonTapped))
        navigationItem.rightBarButtonItems = [ UIBarButtonItem(barButtonSystemItem: .save, target: self, action: #selector(saveButtonTapped)), space,trashItem]
        
        populateEditView()
    }

    
    // MARK: - Datastore
    
    func populateEditView() {
        let event = interactor?.getEvent()
        editView?.populateFields(event: event)
    }

    
    @objc func saveButtonTapped() {
        let cal = Calendar.current
        let dateComponents = cal.dateComponents(Set([Calendar.Component.day,Calendar.Component.month, Calendar.Component.year]), from: editView!.eventDatePicker!.date)
        let newDate = cal.date(from: dateComponents)
        let timeComponents = cal.dateComponents(Set([Calendar.Component.hour,Calendar.Component.minute]), from: editView!.eventTimePicker!.date)
        let newDateWithTime = cal.date(byAdding: timeComponents, to: newDate!)
//        let df = DateFormatter()
//        df.dateFormat = "yyyy-MM-dd_hh-mm"
//        let newDateString = df.string(from: newDateWithTime!)
        let editedEvent = Event(date: newDateWithTime, entity: editView!.event!.entity, meetingGroup: editView!.event!.meetingGroup, note: editView!.eventNoteBox?.text, debates: editView!.event?.debates, id: editView?.event?.id, filename: editView?.event?.filename)
        interactor?.saveEventToDisk(event: editedEvent, callback: { 
            self.router?.returnToSource(source: self.sourceVC!)
        })
    }
    
    
    @objc func cancelButtonTapped() {
        router?.returnToSource(source: sourceVC!)
    }
    
    
    @objc func deleteButtonTapped() {
        interactor!.addEventToBeDeletedToDataStore(event: editView!.event!)
        self.router!.navigateToRemoveEvent() 
    }
}
