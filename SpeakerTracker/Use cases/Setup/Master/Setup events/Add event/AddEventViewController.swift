//
//  AddEventViewController.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 15/09/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit



class AddEventViewController: UIViewController {
    var interactor: AddEventBusinessLogic?
    var router: (NSObjectProtocol & AddEventRoutingLogic & AddEventDataPassing)?
    var sourceVC: DisplayEventsViewController?
    var editView: EditEventView?

    // MARK: - Object lifecycle
    
    convenience init(sourceVC: DisplayEventsViewController) {
        self.init(nibName:nil, bundle: nil)
        self.sourceVC = sourceVC
    }
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: - Setup

    private func setup() {
        let viewController = self
        let interactor = AddEventInteractor()
        let router = AddEventRouter()
        viewController.interactor = interactor
        viewController.router = router
        router.viewController = viewController
        router.dataStore = interactor
    }



    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        setupEditView()
    }

    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)

    }
    
    private func setupEditView() {
        editView = EditEventView(frame: CGRect.zero)
        view.addSubview(editView!)
        editView!.headingLabel?.text = "Create a new event" 
        editView!.translatesAutoresizingMaskIntoConstraints = false
        editView!.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
        editView!.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true
        editView!.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        editView!.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        editView!.eventSelectedEntityLabel?.text = interactor!.getEntity().name
        editView!.eventSelectedMeetingGroupLabel?.text = interactor!.getMeetingGroup().name
        
        navigationItem.leftBarButtonItem = UIBarButtonItem(barButtonSystemItem: .cancel, target: self, action: #selector(cancelButtonTapped))
        navigationItem.rightBarButtonItem = UIBarButtonItem(barButtonSystemItem: .save, target: self, action: #selector(saveButtonTapped))
    }
    
    //MARK: - Button actions
    
    @objc private func saveButtonTapped() {
        let cal = Calendar.current
        let dateComponents = cal.dateComponents(Set([Calendar.Component.day,Calendar.Component.month, Calendar.Component.year]), from: editView!.eventDatePicker!.date)
        let newDate = cal.date(from: dateComponents)
        let timeComponents = cal.dateComponents(Set([Calendar.Component.hour,Calendar.Component.minute]), from: editView!.eventTimePicker!.date)
        let newDateWithTime = cal.date(byAdding: timeComponents, to: newDate!)
        let df = DateFormatter()
        df.dateFormat = "yyyy-MM-dd_hh-mm"
        let newDateString = df.string(from: newDateWithTime!)
        print(newDateString)
        let id = UUID()
        let event = Event(date: newDateWithTime, entity: nil, meetingGroup: nil, note: editView!.eventNoteBox?.text, debates: nil, id: id, filename: newDateString)
        interactor?.saveEventToDisk(event: event, callback: {
            self.router?.returnToSource(source: self.sourceVC!)
        })
    }
    
    
    @objc private func cancelButtonTapped() {
        self.router?.returnToSource(source: self.sourceVC!)
    }
}
