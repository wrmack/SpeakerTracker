//
//  DisplaySubEntitiesRouter.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 8/09/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

@objc protocol DisplaySubEntitiesRoutingLogic {
    func routeToAddSubEntity()
    func routeToEditSubEntity()
    func returnFromAddingSubEntity()
    func returnFromEditingSubEntity()
    func updateDetailVC()
}

protocol DisplaySubEntitiesDataPassing {
    var dataStore: DisplaySubEntitiesDataStore? { get }
}

class DisplaySubEntitiesRouter: NSObject, DisplaySubEntitiesRoutingLogic, DisplaySubEntitiesDataPassing {
    weak var viewController: DisplaySubEntitiesViewController?
    var dataStore: DisplaySubEntitiesDataStore?
    var addSubEntityVC: AddSubEntityViewController?
    var displayDetailVC: DisplayDetailViewController?
    var editSubEntityVC: EditSubEntityViewController?
    
    
    func routeToAddSubEntity() {
        addSubEntityVC = AddSubEntityViewController(sourceVC: viewController!)
        let splitVC = viewController!.splitViewController
        displayDetailVC = splitVC?.viewControllers[1] as? DisplayDetailViewController
        var destinationDS = addSubEntityVC?.router?.dataStore
        passDataToAddSubEntityDataStore(source: dataStore!, destination: &destinationDS!)
        splitVC?.showDetailViewController(addSubEntityVC!, sender: displayDetailVC)
    }
    
    
    func returnFromAddingSubEntity() {
        let splitVC = viewController!.splitViewController
        splitVC!.showDetailViewController(displayDetailVC!, sender: nil)
        addSubEntityVC = nil
        viewController!.refreshAfterAddingSubEntity()
    }
    
    
    
    func updateDetailVC() {
        let splitVC = viewController!.splitViewController
        displayDetailVC = splitVC?.viewControllers[1] as? DisplayDetailViewController
        var destinationDS = displayDetailVC?.router!.dataStore!
        passDataToDisplayDetail(source: dataStore!, destination: &destinationDS!)
        displayDetailVC!.updateDetails()
    }
    
    
    func routeToEditSubEntity() {
        editSubEntityVC = EditSubEntityViewController(sourceVC: viewController!)
        let splitVC = viewController!.splitViewController
        displayDetailVC = splitVC?.viewControllers[1] as? DisplayDetailViewController
        var destinationDS = editSubEntityVC?.router?.dataStore
        passDataToEditSubEntityDataStore(source: dataStore!, destination: &destinationDS!)
        splitVC?.showDetailViewController(editSubEntityVC!, sender: displayDetailVC)
        editSubEntityVC!.populateEditView()
    }
    
    
    func returnFromEditingSubEntity() {
        let splitVC = viewController!.splitViewController
        splitVC!.showDetailViewController(displayDetailVC!, sender: nil)
        editSubEntityVC = nil
        viewController!.refreshAfterEditingSubEntity()
    }
    
    
    
    // MARK: Passing data
    
    func passDataToAddSubEntityDataStore(source: DisplaySubEntitiesDataStore, destination: inout AddSubEntityDataStore) {
        destination.entity = source.entity
    }
    
    func passDataToEditSubEntityDataStore(source: DisplaySubEntitiesDataStore, destination: inout EditSubEntityDataStore) {
        destination.entity = source.entity
        destination.subEntity = source.subEntity
    }
    
    func passDataToDisplayDetail(source: DisplaySubEntitiesDataStore, destination: inout DisplayDetailDataStore) {
        destination.selectedItem = source.subEntity as AnyObject
    }
}
