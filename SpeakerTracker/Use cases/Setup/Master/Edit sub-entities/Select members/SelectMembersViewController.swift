//
//  SelectMembersViewController.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 8/09/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SelectMembersDisplayLogic: class {
    func displayMemberNames(viewModel: SelectMembers.Members.ViewModel)
}



class SelectMembersViewController: UIViewController, SelectMembersDisplayLogic, UITableViewDataSource, UITableViewDelegate {
    var interactor: SelectMembersBusinessLogic?
    var router: (NSObjectProtocol & SelectMembersRoutingLogic & SelectMembersDataPassing)?
    var tableView: UITableView?
    var memberNames = [String]()
    var selectedRows: [Int]?
    var addMode = false
    var editMode = false
    var source: AddSubEntityViewController?
    

    // MARK: Object lifecycle

    convenience init(source: AddSubEntityViewController) {
        self.init(nibName: nil, bundle: nil)
        self.source = source
    }
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }


    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = SelectMembersInteractor()
        let presenter = SelectMembersPresenter()
        let router = SelectMembersRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        
        // =======  Toolbar with buttons
        let toolbar = UIToolbar(frame: CGRect.zero)
        toolbar.backgroundColor = UIColor(white: 0.97, alpha: 0.8)
        toolbar.barStyle = UIBarStyle.default
        toolbar.isTranslucent = true
        toolbar.clipsToBounds = false
        toolbar.setShadowImage(nil, forToolbarPosition: .top)
        toolbar.layer.shadowOffset = CGSize(width: 0, height: 0.3)
        toolbar.layer.shadowColor = UIColor(white: 0.3, alpha: 0.8).cgColor
        toolbar.layer.shadowOpacity = 0.8
        toolbar.layer.shadowRadius = 0.1
        
        let saveButton =   UIBarButtonItem(barButtonSystemItem: .save, target: self, action: #selector(saveButtonTapped(_:)))
        saveButton.isEnabled = true
        
        let flexibleSpace = UIBarButtonItem(barButtonSystemItem: .flexibleSpace, target: nil, action: nil)
        
        let cancelButton =   UIBarButtonItem(barButtonSystemItem: .cancel, target: self, action: #selector(cancelButtonTapped(_:)))
        cancelButton.isEnabled = true
        toolbar.setItems([cancelButton, flexibleSpace, saveButton], animated: false)
        view.addSubview(toolbar)
        
        toolbar.translatesAutoresizingMaskIntoConstraints = false
        toolbar.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
        toolbar.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true
        toolbar.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        toolbar.heightAnchor.constraint(equalToConstant: 64).isActive = true
        
        let heading = UILabel(frame: CGRect.zero)
        heading.text = "Select members"
        heading.font = UIFont.boldSystemFont(ofSize: 17)
        heading.textAlignment = .center
        toolbar.addSubview(heading)
        heading.translatesAutoresizingMaskIntoConstraints = false
        heading.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
        heading.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true
        heading.topAnchor.constraint(equalTo: view.topAnchor, constant: 32).isActive = true
        heading.heightAnchor.constraint(equalToConstant: 20).isActive = true
        
        // ========= Tableview
        tableView = UITableView(frame: CGRect.zero)
        tableView?.register(UITableViewCell.self, forCellReuseIdentifier: "SelectMembersCellView")
        tableView?.dataSource = self
        tableView?.delegate = self
        view.addSubview(tableView!)
        tableView?.translatesAutoresizingMaskIntoConstraints = false
        tableView?.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
        tableView?.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true
        tableView?.topAnchor.constraint(equalTo: view.topAnchor, constant: 66).isActive = true
        tableView?.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        
    }

    // MARK: VIP
    
    func fetchMemberNames() {
        let request = SelectMembers.Members.Request()
        interactor?.fetchMembers(request: request)
    }
    
    func displayMemberNames(viewModel: SelectMembers.Members.ViewModel) {
        memberNames = viewModel.memberNames
        selectedRows = viewModel.selectedRows
        tableView?.reloadData()
    }
    
    
    // MARK: Button actions
    
    @objc func saveButtonTapped(_: UIButton) {
//        if selectedRows != nil {
//            let selectedMembers = (interactor?.getMembers(indices: selectedRows!))!
//            if addMode == true {
//                router?.returnToSourceWithMembers(source: sourceAddKVC!, members: selectedMembers)
//            }
//            else if editMode == true {
//                router?.returnToSourceWithToys(source: sourceEditKVC!, toys: selectedToys)
//            }
//        }
//        else {
//            if addMode == true {
//                router?.returnToSource(source: sourceAddKVC!)
//            }
//            else if editMode == true {
//                router?.returnToSource(source: sourceEditKVC!)
//            }
//        }
    }
    
    
    @objc func cancelButtonTapped(_: UIButton) {
        router!.returnToSource()
        if addMode == true {
//            router?.returnToSource(source: sourceAddKVC!)
        }
        else if editMode == true {
   //         router?.returnToSource(source: sourceEditKVC!)
        }
    }
    
    // MARK: UITableViewDataSource methods
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return memberNames.count
    }
    
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let myIdentifier = "SelectMembersCellView"
        let cell = tableView.dequeueReusableCell(withIdentifier: myIdentifier)
        cell?.textLabel?.text = memberNames[indexPath.row]
        if selectedRows != nil {
            if (selectedRows?.contains(indexPath.row))! {
                cell?.accessoryType = UITableViewCellAccessoryType.checkmark
            }
            else {
                cell?.accessoryType = UITableViewCellAccessoryType.none
            }
        }
        return cell!
    }
    
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        let selectedCell = tableView.cellForRow(at: indexPath)
        if (selectedCell?.accessoryType ==  UITableViewCellAccessoryType.none ) {
            selectedCell?.accessoryType = UITableViewCellAccessoryType.checkmark
            if selectedRows == nil { selectedRows = [Int]()}
            selectedRows?.append(indexPath.row)
            print("Selected rows: \(selectedRows!)")
        }
        else if (selectedCell?.accessoryType ==  UITableViewCellAccessoryType.checkmark ) {
            selectedCell?.accessoryType = UITableViewCellAccessoryType.none
            let idx = selectedRows?.index(of: indexPath.row)
            selectedRows?.remove(at: idx!)
        }
    }
    
}
