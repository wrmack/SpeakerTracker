//
//  AddSubEntityInteractor.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 8/09/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AddSubEntityBusinessLogic {
    func fetchMembers(request: AddSubEntity.SubEntity.Request)
    func saveSubEntityToEntity(subEntity: SubEntity, callback: @escaping ()->())
}

protocol AddSubEntityDataStore {
    var entity: Entity? { get set }
    var members: [Member]? {get set}
}


class AddSubEntityInteractor: AddSubEntityBusinessLogic, AddSubEntityDataStore { 
    var presenter: AddSubEntityPresentationLogic?
    var entity: Entity?
    var members: [Member]?
    
    
    // MARK: VIP
    
    func fetchMembers(request: AddSubEntity.SubEntity.Request) {
        let response = AddSubEntity.SubEntity.Response(members: self.members)
        self.presenter?.presentMembers(response: response)
    }
    
    
    func saveSubEntityToEntity(subEntity: SubEntity, callback: @escaping ()->()) {
        var subEntity = subEntity
        subEntity.members = self.members
        if entity!.subEntities == nil {
            entity!.subEntities = [SubEntity]()
        }
        subEntity.id = UUID()
        entity?.subEntities?.append(subEntity)
        guard let docDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first else {
            print("AddSubEntityInteractor: saveSubEntityToEntity: error: Document directory not found")
            return
        }
        let docFileURL = docDirectory.appendingPathComponent((entity?.fileName)! + ".ent")
        let entityDoc = EntityDocument(fileURL: docFileURL)
        entityDoc.open(completionHandler: { success in
            if !success {
                print("AddSubEntityInteractor: saveSubEntityToEntity: error opening EntityDocument")
            }
            else {
                
                if entityDoc.entity!.subEntities == nil {
                    entityDoc.entity!.subEntities = [SubEntity]()
                }
                entityDoc.entity?.subEntities?.append(subEntity)
                entityDoc.updateChangeCount(.done)
                entityDoc.close(completionHandler: { success in
                    print(entityDoc)
                    callback()
                })
            }
        })
    }
}
