//
//  EditSubEntityViewController.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 14/09/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EditSubEntityDisplayLogic: class {
    func displayMemberNames(viewModel: EditSubEntity.SubEntity.ViewModel)
}



class EditSubEntityViewController: UIViewController, EditSubEntityDisplayLogic, EditSubEntityViewDelegate {
    
    var interactor: EditSubEntityBusinessLogic?
    var router: (NSObjectProtocol & EditSubEntityRoutingLogic & EditSubEntityDataPassing)?
    var sourceVC: DisplaySubEntitiesViewController?
    var editView: EditSubEntityView?

    
    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    convenience init(sourceVC: DisplaySubEntitiesViewController) {
        self.init(nibName:nil, bundle: nil)
        self.sourceVC = sourceVC
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    deinit {
        print("EditSubEntityViewController deinitialising")
    }
    
    

    // MARK: - Setup

    private func setup() {
        let viewController = self
        let interactor = EditSubEntityInteractor()
        let presenter = EditSubEntityPresenter()
        let router = EditSubEntityRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }



    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        editView = EditSubEntityView(frame: CGRect.zero)
        editView!.delegate = self
        view.addSubview(editView!)
        editView!.heading?.text = "Edit member"
        editView!.translatesAutoresizingMaskIntoConstraints = false
        editView!.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
        editView!.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true
        editView!.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        editView!.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
    }

    
    // MARK: - VIP
    
    func populateEditView() {
        let subEntity = interactor?.getSubEntity()
        editView?.populateFields(subEntity: subEntity)
    }
    

    func refreshAfterSelectingMembers() {
        let request = EditSubEntity.SubEntity.Request()
        interactor?.fetchMembers(request: request)
    }
    

    func displayMemberNames(viewModel: EditSubEntity.SubEntity.ViewModel) {
        editView?.membersDetailLabel?.text = viewModel.memberNames
    }


    // MARK: - EditSubEntityViewDelegate methods
    
    func cancelButtonTapped() {
        self.router?.returnToSource(source: self.sourceVC!)
    }
    
    
    func saveButtonTapped(subEntity: SubEntity) {
        interactor?.saveSubEntityToEntity(subEntity: subEntity, callback: {
            self.router?.returnToSource(source: self.sourceVC!)
        })
    }
    
    
    /*
     Removing a member has its own use-case instead of simply being handled by this interactor.
     Having a separate removal use-case allows the use-case to be used from elsewhere - eg from the master view table.
     */
    func deleteButtonTapped(subEntity: SubEntity) {
        interactor!.addSubEntityToBeDeletedToDataStore(subEntity: subEntity)
        self.router!.navigateToRemoveSubEntity()  
    }
    
    
    func membersDisclosureButtonTapped() {
        self.router?.routeToSelectMembers()
    }
}
