//
//  EditSubEntityRouter.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 14/09/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EditSubEntityRoutingLogic {
    func returnToSource(source: DisplaySubEntitiesViewController)
    func navigateToRemoveSubEntity()
    func returnFromRemovingSubEntity()
    func routeToSelectMembers()
    func returnFromSelectMembers(members: [Member]?)
}

protocol EditSubEntityDataPassing {
    var dataStore: EditSubEntityDataStore? { get }
}

class EditSubEntityRouter: NSObject, EditSubEntityRoutingLogic, EditSubEntityDataPassing {
    weak var viewController: EditSubEntityViewController?
    var dataStore: EditSubEntityDataStore?
    var removeSubEntityC: RemoveSubEntityController?
    var selectMembersVC: SelectMembersViewController?
    var splitVC: UISplitViewController?
    
  
    // MARK: Routing
    
    func returnToSource(source: DisplaySubEntitiesViewController) {
        var destinationDS = source.router?.dataStore
        passDataToDisplaySubEntitiesDataStore(source: dataStore!, destination: &destinationDS!)
        source.router?.returnFromEditingSubEntity() 
    }
    
    
    func navigateToRemoveSubEntity() {
        removeSubEntityC = RemoveSubEntityController(source: viewController!)
        var destinationDS = removeSubEntityC?.router?.dataStore
        passDataToRemoveSubEntityDataStore(source: dataStore!, destination: &destinationDS!)
        removeSubEntityC?.removeSubEntity()
    }
    
    
    func returnFromRemovingSubEntity() {
        let source = viewController?.sourceVC
        var destinationDS = source!.router?.dataStore
        passDataToDisplaySubEntitiesDataStore(source: dataStore!, destination: &destinationDS!)
        returnToSource(source: viewController!.sourceVC!)
    }
    
    func routeToSelectMembers() {
        selectMembersVC = SelectMembersViewController(source: viewController!)
        var destinationDS = selectMembersVC?.router?.dataStore
        passDataToSelectMembersDataStore(source: dataStore!, destination: &destinationDS!)
        splitVC = viewController!.splitViewController
        splitVC?.showDetailViewController(selectMembersVC!, sender: viewController)
        selectMembersVC?.fetchMemberNames()
    }
    
    func returnFromSelectMembers(members: [Member]?) {
        if members != nil {
            viewController!.refreshAfterSelectingMembers()
        }
        splitVC?.showDetailViewController(viewController!, sender: nil)
        selectMembersVC = nil
    }
    
    
    // MARK: Passing data
    
    func passDataToDisplaySubEntitiesDataStore(source: EditSubEntityDataStore, destination: inout DisplaySubEntitiesDataStore) {
        destination.entity = source.entity
    }
    
    
    func passDataToSelectMembersDataStore(source: EditSubEntityDataStore, destination: inout SelectMembersDataStore) {
        destination.entity = source.entity
    }
    
    
    func passDataToRemoveSubEntityDataStore(source: EditSubEntityDataStore, destination: inout RemoveSubEntityDataStore) {
        destination.entity = source.entity
        destination.subEntity = source.subEntity
    }
}
