//
//  EditSubEntityInteractor.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 14/09/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EditSubEntityBusinessLogic {
    func getSubEntity() -> SubEntity?
    func saveSubEntityToEntity(subEntity: SubEntity, callback: @escaping ()->())
    func addSubEntityToBeDeletedToDataStore(subEntity: SubEntity)
    func fetchMembers(request: EditSubEntity.SubEntity.Request)
}

protocol EditSubEntityDataStore {
    var entity: Entity? {get set}
    var subEntity: SubEntity? {get set}
    var members: [Member]? {get set}
}


class EditSubEntityInteractor: EditSubEntityBusinessLogic, EditSubEntityDataStore {
    var presenter: EditSubEntityPresentationLogic?
    var entity: Entity?
    var subEntity: SubEntity?
    var members: [Member]?
    
    
    // MARK: VIP
    
    /*
     The sub-entity from the editing form is passed in as a parameter.
     The members propoerty was updated through data-passing after members were selected so members need to be added to the sub-entity.
     
     */
    func saveSubEntityToEntity(subEntity: SubEntity, callback: @escaping ()->()) {
        if entity!.subEntities == nil {
            entity!.subEntities = [SubEntity]()
        }
        self.subEntity = subEntity
        self.subEntity?.members = members
        if let idx = entity!.subEntities?.firstIndex(where: {$0.id == subEntity.id}) {
            entity?.subEntities![idx] = self.subEntity!
        }
        guard let docDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first else {
            print("EditSubEntityInteractor: saveSubEntityToEntity: error: Document directory not found")
            return
        }
        let docFileURL = docDirectory.appendingPathComponent((entity?.fileName)! + ".ent")
        let entityDoc = EntityDocument(fileURL: docFileURL)
        entityDoc.open(completionHandler: { success in
            if !success {
                print("EditSubEntityInteractor: saveSubEntityToEntity: error opening EntityDocument")
            }
            else {
                
                if entityDoc.entity!.subEntities == nil {
                    entityDoc.entity!.subEntities = [SubEntity]()
                }
                if let idx = self.entity!.subEntities?.firstIndex(where: {$0.id == subEntity.id}) {
                    entityDoc.entity?.subEntities![idx] = self.subEntity!
                }
                entityDoc.updateChangeCount(.done)
                entityDoc.close(completionHandler: { success in
                    print(entityDoc)
                    callback()
                })
            }
        })
    }
    
    
    func fetchMembers(request: EditSubEntity.SubEntity.Request) {
        subEntity?.members = members
        let response = EditSubEntity.SubEntity.Response(members: self.members) 
        self.presenter?.presentMembers(response: response)
    }
    
    
    // MARK: - Datastore
    
    func getSubEntity() -> SubEntity? {
        return self.subEntity
    }
    
    func addSubEntityToBeDeletedToDataStore(subEntity: SubEntity){
        self.subEntity = subEntity
    }
}

