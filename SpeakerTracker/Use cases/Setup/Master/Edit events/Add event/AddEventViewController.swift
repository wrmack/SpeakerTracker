//
//  AddEventViewController.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 15/09/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AddEventDisplayLogic: class {
//    func displaySomething(viewModel: AddEvent.Something.ViewModel)
}



class AddEventViewController: UIViewController, AddEventDisplayLogic, EditEventViewDelegate {
    var interactor: AddEventBusinessLogic?
    var router: (NSObjectProtocol & AddEventRoutingLogic & AddEventDataPassing)?
    var sourceVC: DisplayEventsViewController?
    var editView: EditEventView?

    // MARK: - Object lifecycle
    
    convenience init(sourceVC: DisplayEventsViewController) {
        self.init(nibName:nil, bundle: nil)
        self.sourceVC = sourceVC
    }
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: - Setup

    private func setup() {
        let viewController = self
        let interactor = AddEventInteractor()
        let presenter = AddEventPresenter()
        let router = AddEventRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: - Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
    }

    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)

    }
    
    func setupEditView() {
        editView = EditEventView(frame: CGRect.zero)
        editView!.delegate = self
        view.addSubview(editView!)
        editView!.heading?.text = "New event"
        editView!.translatesAutoresizingMaskIntoConstraints = false
        editView!.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
        editView!.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true
        editView!.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        editView!.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        editView!.eventSelectedEntityLabel?.text = interactor!.getEntity().name
        editView!.eventSelectedMeetingGroupLabel?.text = interactor!.getMeetingGroup().name
    }
    
    //MARK: - EditEventViewDelegate methods
    
    func saveButtonTapped(event: Event) {
        interactor?.saveEventToDisk(event: event, callback: {
            self.router?.returnToSource(source: self.sourceVC!)
        })
    }
    
    
    func cancelButtonTapped() {
        self.router?.returnToSource(source: self.sourceVC!)
    }
}
