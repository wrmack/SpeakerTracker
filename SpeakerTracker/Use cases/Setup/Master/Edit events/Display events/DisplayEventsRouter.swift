//
//  DisplayEventsRouter.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 2/09/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

@objc protocol DisplayEventsRoutingLogic {
    func routeToAddEvent()
    func returnFromAddingEvent()
    func updateDetailVC()
}

protocol DisplayEventsDataPassing {
    var dataStore: DisplayEventsDataStore? { get }
}

class DisplayEventsRouter: NSObject, DisplayEventsRoutingLogic, DisplayEventsDataPassing {
    weak var viewController: DisplayEventsViewController?
    var dataStore: DisplayEventsDataStore?
    var addEventVC: AddEventViewController?
    var displayDetailVC: DisplayDetailViewController?
  
    
  // MARK: Routing
  
    func routeToAddEvent() {
        addEventVC = AddEventViewController(sourceVC: viewController!)
        let splitVC = viewController!.splitViewController
        displayDetailVC = splitVC?.viewControllers[1] as? DisplayDetailViewController
        //        NotificationCenter.default.post(name: NSNotification.Name(rawValue: "EditingViewToggled"), object: nil, userInfo: nil)
        splitVC?.showDetailViewController(addEventVC!, sender: displayDetailVC)
    }
    
    
    func returnFromAddingEvent() {
        let splitVC = viewController!.splitViewController
        splitVC!.showDetailViewController(displayDetailVC!, sender: nil)
        addEventVC = nil
    }
    
    func updateDetailVC() {
        let splitVC = viewController!.splitViewController
        displayDetailVC = splitVC?.viewControllers[1] as? DisplayDetailViewController
        var destinationDS = displayDetailVC?.router!.dataStore!
        passDataToDisplayDetail(source: dataStore!, destination: &destinationDS!)
        displayDetailVC!.updateDetails()
    }
    
    
    func passDataToDisplayDetail(source: DisplayEventsDataStore, destination: inout DisplayDetailDataStore) {
        destination.selectedItem = source.event as AnyObject
    }
}
