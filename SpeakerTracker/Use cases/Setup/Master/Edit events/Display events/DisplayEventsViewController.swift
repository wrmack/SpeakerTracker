//
//  DisplayEventsViewController.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 2/09/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DisplayEventsDisplayLogic: class {
    func displayEvents(viewModel: DisplayEvents.Events.ViewModel)
}

class DisplayEventsViewController: UITableViewController, DisplayEventsDisplayLogic, DisplayDetailViewControllerDelegate {

    
    var interactor: DisplayEventsBusinessLogic?
    var router: (NSObjectProtocol & DisplayEventsRoutingLogic & DisplayEventsDataPassing)?
    var eventNames = [String]()
    var meetingGroupSelected = false

    
    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = DisplayEventsInteractor()
        let presenter = DisplayEventsPresenter()
        let router = DisplayEventsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
  
  // MARK: View lifecycle
  
    override func viewDidLoad() {
        super.viewDidLoad()
    }

    /*
     Adjust tab bar of original UITabBarController once views have loaded
     */
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        guard let tabBarCont = UIApplication.shared.keyWindow?.rootViewController as? UITabBarController else {
            print("Could not get UITabBarController")
            return
        }
        
        let splitVC = splitViewController
        let detailVC = splitVC?.viewControllers[1] as! DisplayDetailViewController
        let detailVCView = detailVC.view
        let tbFrame = tabBarCont.tabBar.frame
        tabBarCont.tabBar.frame = CGRect(x: (detailVCView?.frame.origin.x)!, y: tbFrame.origin.y, width: (detailVCView?.frame.size.width)!, height: tbFrame.size.height)
         detailVC.detailLabel.text = "Select an entity  âŒª"
        detailVC.detailButton.setTitleColor(UIColor(white: 0.3, alpha: 0.5), for: .normal)
        detailVC.detailButton.setTitle("No entity selected", for: UIControlState.normal)
        detailVC.detailButton.isHidden = false
        detailVC.detailLabel.textAlignment = .center
        detailVC.delegate = self
        interactor!.resetData()
        eventNames = [String]()
        tableView.reloadData()
        router?.updateDetailVC()
    }
    
    
    
    // MARK: - Storyboard actions
    

    @IBAction func addEvent(_ sender: Any) {
        router?.routeToAddEvent()
    }
    
    
    // MARK: - VIP
    
    func fetchEvents() {
        let request = DisplayEvents.Events.Request()
        interactor?.fetchEvents(request: request)
    }
    
    
    
    func displayEvents(viewModel: DisplayEvents.Events.ViewModel) {
        eventNames = viewModel.eventNames!
        tableView.reloadData()
        tableView.selectRow(at: IndexPath(row: 0, section: 0), animated: false, scrollPosition: .top)
        interactor?.setCurrentEvent(index: 0)
        router!.updateDetailVC()
    }
    
    
    func refreshAfterAddingEvent() {
        fetchEvents()
    }
    
    func setEntity(entity: Entity) {
        interactor!.setEntity(entity: entity) 
    }
    
    func setMeetingGroup(meetingGroup: MeetingGroup) {
        interactor!.setMeetingGroup(meetingGroup: meetingGroup)
    }
    
    
    // MARK: - Table view data source
    
    override func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return eventNames.count
    }
    
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "EventsMasterCell", for: indexPath)
        cell.textLabel?.text = eventNames[indexPath.row]
        return cell
    }
    
    
    // MARK: UITableViewDelegate methods
    
    override func tableView(_ tableView: UITableView, willSelectRowAt indexPath: IndexPath) -> IndexPath? {
        interactor?.setCurrentEvent(index: indexPath.row)
        router!.updateDetailVC()
        return indexPath
    }

    
    // MARK: DisplayDetailViewControllerDelegate methods
    
    func didSelectEntityInDisplayDetailViewController(entity: Entity) {
        setEntity(entity: entity)
    }
    
    func didSelectMeetingGroupInDisplayDetailViewController(meetingGroup: MeetingGroup) {
        setMeetingGroup(meetingGroup: meetingGroup)
        fetchEvents()
    }
}
