//
//  DisplayEventsInteractor.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 2/09/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DisplayEventsBusinessLogic {
    func fetchEvents(request: DisplayEvents.Events.Request)
    func setCurrentEvent(index: Int)
    func setMeetingGroup(meetingGroup: MeetingGroup)
    func setEntity(entity: Entity)
    func getCurrentEntity() -> Entity
    func resetData()
}

protocol DisplayEventsDataStore {
    var event: Event? {get set}
    var entity: Entity? {get set}
    var meetingGroup: MeetingGroup? {get set}
}


class DisplayEventsInteractor: DisplayEventsBusinessLogic, DisplayEventsDataStore {
    var presenter: DisplayEventsPresentationLogic?
    var event: Event?
    var events: [Event]?
    var entity: Entity?
    var meetingGroup: MeetingGroup?

    
    // MARK: - VIP
    
    // TODO: Sends to presenter for each file
    func fetchEvents(request: DisplayEvents.Events.Request) {
        events = [Event]()
        let fileManager = FileManager.default
        guard let docDirectory = fileManager.urls(for: .documentDirectory, in: .userDomainMask).first else {
            print("DisplayEventsInteractor: fetchEvents: error: Document directory not found")
            return
        }
        do {
            let fileURLs = try fileManager.contentsOfDirectory(at: docDirectory, includingPropertiesForKeys: nil)
            for url in fileURLs {
                if url.pathExtension == "evt" {
                    let eventDoc = EventDocument(fileURL: url)
                    eventDoc.open(completionHandler: { success in
                        if !success {
                            print("DisplayEventsInteractor: fetchEvents: error opening document")
                        }
                        else {
                            eventDoc.close(completionHandler: { success in
                                guard let event = eventDoc.event else {
                                    print("DisplayEventsInteractor: fetchEvents: event is nil")
                                    return
                                }
                                if event.meetingGroup == self.meetingGroup {
                                    self.events!.append(event)
                                }
                                let response = DisplayEvents.Events.Response(events: self.events)
                                self.presenter?.presentEvents(response: response)
                            })
                        }
                    })
                }
            }
            
        } catch {
            print("Error while enumerating files \(docDirectory.path): \(error.localizedDescription)")
        }
        
    }
    
    
    // MARK: - Datastore
    
    func setCurrentEvent(index: Int) {
        if (events?.count)! > 0 {
            event = events![index]
        }
    }
    
    
    func setMeetingGroup(meetingGroup: MeetingGroup) {
        self.meetingGroup = meetingGroup
    }
    
    func setEntity(entity: Entity) {
        self.entity = entity
        self.events = nil
        self.event = nil
        self.meetingGroup = nil
    }
    
    
    func getCurrentEntity() -> Entity {
        return self.entity!
    }
    
    
    func resetData() {
        self.entity = nil
        self.event = nil
        self.events = nil
        self.meetingGroup = nil
    }
}
