//
//  RemoveMeetingGroupInteractor.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 14/09/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RemoveMeetingGroupBusinessLogic {
    func removeMeetingGroup(callback: @escaping ()->())
}

protocol RemoveMeetingGroupDataStore {
    var entity: Entity? {get set}
    var meetingGroup: MeetingGroup? {get set}
}



class RemoveMeetingGroupInteractor: RemoveMeetingGroupBusinessLogic, RemoveMeetingGroupDataStore {
    var entity: Entity?
    var meetingGroup: MeetingGroup?
    
    /*
     For the entity, remove the meeting group with same meetingGroup.id, or, if that is not available, with same meetingGroup.name
     If the current entity saved in defaults is this entity, replace it with this one.
     Open the entity document and update its entity property with this one.
     */
    func removeMeetingGroup(callback: @escaping ()->()) {
        if meetingGroup!.id != nil {
            if let idx = entity!.meetingGroups?.firstIndex(where: {$0.id == meetingGroup!.id}) {
                entity?.meetingGroups!.remove(at: idx)
            }
        }
        else {
            if let idx = entity!.meetingGroups?.firstIndex(where: {$0.name == meetingGroup!.name}) {
                entity?.meetingGroups!.remove(at: idx)
            }
        }
        let savedEntity = UserDefaultsManager.getCurrentEntity()
        if savedEntity == self.entity {
            UserDefaultsManager.saveCurrentEntity(entity: self.entity!)
        }
        guard let docDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first else {
            print("RemoveMeetingGroupInteractor: removeMeetingGroup: error: Document directory not found")
            return
        }
        let docFileURL = docDirectory.appendingPathComponent((entity?.id?.uuidString)! + ".ent")
        let entityDoc = EntityDocument(fileURL: docFileURL)
        entityDoc.open(completionHandler: { success in
            if !success {
                print("RemoveMeetingGroupInteractor: removeMeetingGroup: error opening EntityDocument")
            }
            else {
                if self.meetingGroup!.id != nil {
                    if let idx = entityDoc.entity!.meetingGroups?.firstIndex(where: {$0.id == self.meetingGroup!.id}) {
                        entityDoc.entity?.meetingGroups!.remove(at: idx)
                    }
                }
                else {
                    if let idx = entityDoc.entity!.meetingGroups?.firstIndex(where: {$0.name == self.meetingGroup!.name}) {
                        entityDoc.entity?.meetingGroups!.remove(at: idx)
                    }
                }
                entityDoc.updateChangeCount(.done)
                entityDoc.close(completionHandler: { success in
                    print(entityDoc)
                    callback()
                })
            }
        })
    }
}
