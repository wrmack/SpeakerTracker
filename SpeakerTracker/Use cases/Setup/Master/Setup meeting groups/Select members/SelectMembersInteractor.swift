//
//  SelectMembersInteractor.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 8/09/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SelectMembersBusinessLogic {
    func fetchMembers(request: SelectMembers.Members.Request)
    func getMemberIDs(indices: [Int] ) -> [UUID] 
}

protocol SelectMembersDataStore {
    var entity: Entity? {get set}
    var meetingGroup: MeetingGroup?  {get set}
    var memberIDs: [UUID]? {get set}
}

class SelectMembersInteractor: SelectMembersBusinessLogic, SelectMembersDataStore {
    var presenter: SelectMembersPresentationLogic?
    var entity: Entity?
    var meetingGroup: MeetingGroup?
    var memberIDs: [UUID]?



    // MARK: VIP

    func fetchMembers(request: SelectMembers.Members.Request) {
        var selectedIndices = [Int]()
//        var sortedMembers = entity?.members
        entity?.members?.sort(by: {
            if $0.lastName! < $1.lastName! {
                return true
            }
            return false
        })
        if meetingGroup != nil && meetingGroup?.memberIDs != nil {
            for memberID in (meetingGroup!.memberIDs)! {
                if let idx = entity?.members?.firstIndex(where: {$0.id == memberID}) {
                    selectedIndices.append(idx)
                }
            }
        }
        let response = SelectMembers.Members.Response(members: entity?.members, selectedIndices: selectedIndices)
        self.presenter?.presentMembers(response: response) 
    }
    
    
    // MARK: Datastore
    
    func getMemberIDs(indices: [Int] ) -> [UUID] {
        let allMembers = entity?.members
        var selectedMemberIDs = [UUID]()
        for idx in indices {
            selectedMemberIDs.append(allMembers![idx].id!)
        }
        return selectedMemberIDs
    }
}
