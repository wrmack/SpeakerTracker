//
//  AddMeetingGroupViewController.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 8/09/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AddMeetingGroupDisplayLogic: class {
    func displayMemberNames(viewModel: AddMeetingGroup.MeetingGroup.ViewModel)
}



class AddMeetingGroupViewController: UIViewController, AddMeetingGroupDisplayLogic, EditMeetingGroupViewDelegate {
    
    var interactor: AddMeetingGroupBusinessLogic?
    var router: (NSObjectProtocol & AddMeetingGroupRoutingLogic & AddMeetingGroupDataPassing)?
    var sourceVC: DisplayMeetingGroupsViewController?
    var editView: EditMeetingGroupView?

    
    // MARK: Object lifecycle
    
    convenience init(sourceVC: DisplayMeetingGroupsViewController) {
        self.init(nibName:nil, bundle: nil)
        self.sourceVC = sourceVC
    }

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }


    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = AddMeetingGroupInteractor()
        let presenter = AddMeetingGroupPresenter()
        let router = AddMeetingGroupRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        editView = EditMeetingGroupView(frame: CGRect.zero)
        view.addSubview(editView!)
        editView!.headingLabel?.text = "Create new meeting group"
        editView!.infoLabel!.isHidden = false
        editView!.translatesAutoresizingMaskIntoConstraints = false
        editView!.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
        editView!.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true
        editView!.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        editView!.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        
        editView?.delegate = self
        
        navigationItem.leftBarButtonItem = UIBarButtonItem(barButtonSystemItem: .cancel, target: self, action: #selector(cancelButtonTapped))
        navigationItem.rightBarButtonItem = UIBarButtonItem(barButtonSystemItem: .save, target: self, action: #selector(saveButtonTapped))
     }
 
    
    // MARK: - Methods
    
    internal func refreshAfterSelectingMembers() {
        let request = AddMeetingGroup.MeetingGroup.Request()
        interactor?.fetchMembers(request: request)
    }
    
    
    func displayMemberNames(viewModel: AddMeetingGroup.MeetingGroup.ViewModel) {
        editView?.membersDetailLabel?.text = viewModel.memberNames
    }
    
    

    // MARK: - Button actions
    
    @objc private func saveButtonTapped() {
        let id = UUID()
        let addedMeetingGroup = MeetingGroup(name: editView!.nameBox?.text, memberIDs: nil, fileName: nil, id: id)

        interactor?.saveMeetingGroupToEntity(meetingGroup: addedMeetingGroup, callback: {
            self.router?.returnToSource(source: self.sourceVC!)
        })
    }
    
    
    @objc private func cancelButtonTapped() {
        self.router?.returnToSource(source: self.sourceVC!)
    }
    
    
    // MARK: - EditMeetingGroupViewDelegate methods
    
    func membersDisclosureButtonTapped() {
        self.router?.routeToSelectMembers()
    }

}
