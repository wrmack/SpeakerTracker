//
//  AddMeetingGroupInteractor.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 8/09/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AddMeetingGroupBusinessLogic {
    func fetchMembers(request: AddMeetingGroup.MeetingGroup.Request)
    func saveMeetingGroupToEntity(meetingGroup: MeetingGroup, callback: @escaping ()->())
}

protocol AddMeetingGroupDataStore {
    var entity: Entity? { get set }
    var members: [Member]? {get set}
}


class AddMeetingGroupInteractor: AddMeetingGroupBusinessLogic, AddMeetingGroupDataStore {
    var presenter: AddMeetingGroupPresentationLogic?
    var entity: Entity?
    var members: [Member]?
    
    
    // MARK: VIP
    
    func fetchMembers(request: AddMeetingGroup.MeetingGroup.Request) {
        let response = AddMeetingGroup.MeetingGroup.Response(members: self.members)
        self.presenter?.presentMembers(response: response)
    }
    
    
    func saveMeetingGroupToEntity(meetingGroup: MeetingGroup, callback: @escaping ()->()) {
        var meetingGroup = meetingGroup
        meetingGroup.members = self.members
        if entity!.meetingGroups == nil {
            entity!.meetingGroups = [MeetingGroup]()
        }
        meetingGroup.id = UUID()
        entity?.meetingGroups?.append(meetingGroup)
        entity?.meetingGroups?.sort(by: {
            if $0.name! < $1.name! {
                return true
            }
            return false
        })
        let savedEntity = UserDefaultsManager.getCurrentEntity()
        if savedEntity == self.entity {
            UserDefaultsManager.saveCurrentEntity(entity: self.entity!)
        }
        guard let docDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first else {
            print("AddMeetingGroupInteractor: saveMeetingGroupToEntity: error: Document directory not found")
            return
        }
        let docFileURL = docDirectory.appendingPathComponent((entity?.id?.uuidString)! + ".ent")
        let entityDoc = EntityDocument(fileURL: docFileURL)
        entityDoc.open(completionHandler: { success in
            if !success {
                print("AddMeetingGroupInteractor: saveMeetingGroupToEntity: error opening EntityDocument")
            }
            else {
                
                if entityDoc.entity!.meetingGroups == nil {
                    entityDoc.entity!.meetingGroups = [MeetingGroup]()
                }
                entityDoc.entity?.meetingGroups?.append(meetingGroup)
                entityDoc.updateChangeCount(.done)
                entityDoc.close(completionHandler: { success in
                    print(entityDoc)
                    callback()
                })
            }
        })
    }
}
