//
//  EditMeetingGroupViewController.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 14/09/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EditMeetingGroupDisplayLogic: class {
    func displayMemberNames(viewModel: EditMeetingGroup.MeetingGroup.ViewModel)
}



class EditMeetingGroupViewController: UIViewController, EditMeetingGroupDisplayLogic, EditMeetingGroupViewDelegate {
    
    var interactor: EditMeetingGroupBusinessLogic?
    var router: (NSObjectProtocol & EditMeetingGroupRoutingLogic & EditMeetingGroupDataPassing)?
    var sourceVC: DisplayMeetingGroupsViewController?
    var editView: EditMeetingGroupView?

    
    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    convenience init(sourceVC: DisplayMeetingGroupsViewController) {
        self.init(nibName:nil, bundle: nil)
        self.sourceVC = sourceVC
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    deinit {
        print("EditMeetingGroupViewController deinitialising")
    }
    
    

    // MARK: - Setup

    private func setup() {
        let viewController = self
        let interactor = EditMeetingGroupInteractor()
        let presenter = EditMeetingGroupPresenter()
        let router = EditMeetingGroupRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }



    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        editView = EditMeetingGroupView(frame: CGRect.zero)
        view.addSubview(editView!)
        editView!.headingLabel?.text = "Edit meeting group"
        editView!.translatesAutoresizingMaskIntoConstraints = false
        editView!.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
        editView!.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true
        editView!.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        editView!.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        
        let space = UIBarButtonItem(barButtonSystemItem: UIBarButtonItem.SystemItem.fixedSpace, target: nil, action: nil)
        space.width = 100
        
        let trashItem = UIBarButtonItem(barButtonSystemItem: .trash, target: self, action: #selector(deleteButtonTapped))
        trashItem.tintColor = UIColor.red
        navigationItem.leftBarButtonItem = UIBarButtonItem(barButtonSystemItem: .cancel, target: self, action: #selector(cancelButtonTapped))
        navigationItem.rightBarButtonItems = [ UIBarButtonItem(barButtonSystemItem: .save, target: self, action: #selector(saveButtonTapped)), space,trashItem]
        
        editView?.delegate = self
        
        populateEditView()
    }

    
    // MARK: - Methods
    
    func populateEditView() {
        let meetingGroup = interactor?.getMeetingGroup()
        let entity = interactor?.getEntity() 
        editView?.populateFields(meetingGroup: meetingGroup, entity: entity)
    }
    

    func refreshAfterSelectingMembers() {
        let request = EditMeetingGroup.MeetingGroup.Request()
        interactor?.fetchMembers(request: request)
    }
    

    func displayMemberNames(viewModel: EditMeetingGroup.MeetingGroup.ViewModel) {
        editView?.membersDetailLabel?.text = viewModel.memberNames
    }
    
    // MARK: - Button actions
    
    @objc private func saveButtonTapped() {
        var id: UUID?
        
        let meetingGroup = editView?.meetingGroup
        if meetingGroup != nil {
            id = meetingGroup?.id
        }
        let editedMeetingGroup = MeetingGroup(name: editView!.nameBox?.text, memberIDs: nil, fileName: nil, id: id)
        
        interactor?.saveMeetingGroupToEntity(meetingGroup: editedMeetingGroup, callback: {
            self.router?.returnToSource(source: self.sourceVC!)
        })
    }
    
    
    @objc private func cancelButtonTapped() {
        self.router?.returnToSource(source: self.sourceVC!)
    }
    
    
    @objc func deleteButtonTapped() {
        interactor?.addMeetingGroupToBeDeletedToDataStore(meetingGroup: editView!.meetingGroup!)
        router?.navigateToRemoveMeetingGroup()
    }
    
    
    // MARK: - EditMeetingGroupViewDelegate methods
    
    func membersDisclosureButtonTapped() {
        self.router?.routeToSelectMembers()
    }
    
    func enableSaveButton(enable: Bool) {
        navigationItem.rightBarButtonItem?.isEnabled = enable
    }
}
