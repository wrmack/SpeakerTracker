//
//  DisplayMeetingGroupsRouter.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 8/09/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

@objc protocol DisplayMeetingGroupsRoutingLogic {
    func routeToAddMeetingGroup()
    func routeToEditMeetingGroup()
    func returnFromAddingMeetingGroup()
    func returnFromEditingMeetingGroup()
    func updateDetailVC()
}

protocol DisplayMeetingGroupsDataPassing {
    var dataStore: DisplayMeetingGroupsDataStore? { get }
}

class DisplayMeetingGroupsRouter: NSObject, DisplayMeetingGroupsRoutingLogic, DisplayMeetingGroupsDataPassing {
    weak var viewController: DisplayMeetingGroupsViewController?
    var dataStore: DisplayMeetingGroupsDataStore?
    var addMeetingGroupVC: AddMeetingGroupViewController?
    var displayDetailVC: DisplayDetailViewController?
    var displayDetailNavC: UINavigationController?
    var editMeetingGroupVC: EditMeetingGroupViewController?

    
    
//    func routeToAddMeetingGroup() {
//        addMeetingGroupVC = AddMeetingGroupViewController(sourceVC: viewController!)
//        let splitVC = viewController!.splitViewController
//        displayDetailNavC = splitVC?.viewControllers[1] as? UINavigationController
//        displayDetailVC = displayDetailNavC!.viewControllers[0] as? DisplayDetailViewController
//        var destinationDS = addMeetingGroupVC?.router?.dataStore
//        passDataToAddMeetingGroupDataStore(source: dataStore!, destination: &destinationDS!)
//        splitVC?.showDetailViewController(addMeetingGroupVC!, sender: displayDetailVC)
//    }
//
//
//    func returnFromAddingMeetingGroup() {
//        let splitVC = viewController!.splitViewController
//        splitVC!.showDetailViewController(displayDetailNavC!, sender: nil)
//        addMeetingGroupVC = nil
//        viewController!.refreshAfterAddingMeetingGroup()
//    }
    
    
    func routeToAddMeetingGroup() {
        addMeetingGroupVC = AddMeetingGroupViewController(sourceVC: viewController!)
        let splitVC = viewController!.splitViewController
        displayDetailNavC = splitVC?.viewControllers[1] as? UINavigationController
        var destinationDS = addMeetingGroupVC?.router?.dataStore
        passDataToAddMeetingGroupDataStore(source: dataStore!, destination: &destinationDS!)
        displayDetailNavC?.pushViewController(addMeetingGroupVC!, animated: true)
        disableOtherTabBarItems()
    }


    func returnFromAddingMeetingGroup() {
        displayDetailNavC?.popViewController(animated: true)
        addMeetingGroupVC = nil
        enableAllTabBarItems()
        viewController!.refreshAfterAddingMeetingGroup()
    }

    
    
    func updateDetailVC() {
        if displayDetailVC == nil {
            let splitVC = viewController!.splitViewController
            displayDetailNavC = splitVC?.viewControllers[1] as? UINavigationController
            displayDetailVC = displayDetailNavC!.viewControllers[0] as? DisplayDetailViewController
        }
        var destinationDS = displayDetailVC?.router!.dataStore!
        passDataToDisplayDetail(source: dataStore!, destination: &destinationDS!)
        displayDetailVC!.updateDetails()
    }
    
    
    func routeToEditMeetingGroup() {
        editMeetingGroupVC = EditMeetingGroupViewController(sourceVC: viewController!)
        let splitVC = viewController!.splitViewController
        displayDetailNavC = splitVC?.viewControllers[1] as? UINavigationController
        var destinationDS = editMeetingGroupVC?.router?.dataStore
        passDataToEditMeetingGroupDataStore(source: dataStore!, destination: &destinationDS!)
        displayDetailNavC?.pushViewController(editMeetingGroupVC!, animated: true)
        disableOtherTabBarItems()
    }
    
    
    func returnFromEditingMeetingGroup() {
        displayDetailNavC?.popViewController(animated: true)
        editMeetingGroupVC = nil
        enableAllTabBarItems()
        viewController!.refreshAfterEditingMeetingGroup()
    }
    
    
    
    // MARK: Passing data
    
    func passDataToAddMeetingGroupDataStore(source: DisplayMeetingGroupsDataStore, destination: inout AddMeetingGroupDataStore) {
        destination.entity = source.entity
    }
    
    func passDataToEditMeetingGroupDataStore(source: DisplayMeetingGroupsDataStore, destination: inout EditMeetingGroupDataStore) {
        destination.entity = source.entity
        destination.meetingGroup = source.meetingGroup
    }
    
    func passDataToDisplayDetail(source: DisplayMeetingGroupsDataStore, destination: inout DisplayDetailDataStore) {
        destination.selectedItem = source.meetingGroup as AnyObject
        destination.currentEntity = source.entity
    }
    
    // MARK: Helpers
    
    func disableOtherTabBarItems() {
        let splitVC = viewController!.splitViewController
        let masterTabBar = (splitVC?.viewControllers[0] as! UITabBarController).tabBar
        for item in masterTabBar.items! {
            if item != masterTabBar.selectedItem {
                item.isEnabled = false
            }
        }
        let detailTabBar = displayDetailNavC?.tabBarController?.tabBar
        for item in (detailTabBar?.items)! {
            item.isEnabled = false
        }
    }
    
    func enableAllTabBarItems() {
        let splitVC = viewController!.splitViewController
        let masterTabBar = (splitVC?.viewControllers[0] as! UITabBarController).tabBar
        for item in masterTabBar.items! {
            item.isEnabled = true
        }
        let detailTabBar = displayDetailNavC?.tabBarController?.tabBar
        for item in (detailTabBar?.items)! {
            item.isEnabled = true
        }
    }
}
