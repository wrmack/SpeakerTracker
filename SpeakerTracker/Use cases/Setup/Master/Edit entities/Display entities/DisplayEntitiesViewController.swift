//
//  DisplayEntitiesViewController.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 1/09/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DisplayEntitiesDisplayLogic: class {
    func displayEntities(viewModel: DisplayEntities.Entities.ViewModel)
}

class DisplayEntitiesViewController: UITableViewController, DisplayEntitiesDisplayLogic {
    var interactor: DisplayEntitiesBusinessLogic?
    var router: (NSObjectProtocol & DisplayEntitiesRoutingLogic & DisplayEntitiesDataPassing)?
    var entityNames = [String]()
    

    // MARK: - Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    
    deinit {
        print("DisplayEntitiesViewController: deinitialising")
    }
    
    
    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = DisplayEntitiesInteractor()
        let presenter = DisplayEntitiesPresenter()
        let router = DisplayEntitiesRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
    }

    /*
     Adjust tab bar of original UITabBarController once views have loaded
     */
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        guard let tabBarCont = UIApplication.shared.keyWindow?.rootViewController as? UITabBarController else {
            print("DisplayEntitiesViewController: could not get UITabBarController")
            return
        }

        let splitVC = splitViewController
        let detailVC = splitVC?.viewControllers[1] as! DisplayDetailViewController
        let detailVCView = detailVC.view
        let tbFrame = tabBarCont.tabBar.frame
        tabBarCont.tabBar.frame = CGRect(x: (detailVCView?.frame.origin.x)!, y: tbFrame.origin.y, width: (detailVCView?.frame.size.width)!, height: tbFrame.size.height)
        
        detailVC.detailLabel.text = "Add or edit a top-level entity"
        detailVC.detailButton.isHidden = true
        detailVC.detailLabel.textAlignment = .center

        fetchEntities()
    }
    
    
    // MARK: - Storyboard actions


    @IBAction func addEntity(_ sender: Any) {
        router?.routeToAddEntity() 
    }


    // MARK: - VIP
    
    func fetchEntities() {
        let request = DisplayEntities.Entities.Request()
        interactor?.fetchEntities(request: request)
    }


    
    func displayEntities(viewModel: DisplayEntities.Entities.ViewModel) {
        entityNames = viewModel.entityNames!
        tableView.reloadData()
        interactor?.setCurrentEntity(index: 0)
        router!.updateDetailVC()
    }
    
    
    func refreshAfterAddingEntity() {
        fetchEntities()
    }

    
    
    // MARK: - Table view data source

    override func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }

    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return entityNames.count
    }
    

    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "EntitiesMasterCell", for: indexPath)
        cell.textLabel?.text = entityNames[indexPath.row]
        return cell
     }

    
    // MARK: UITableViewDelegate methods
    
    override func tableView(_ tableView: UITableView, willSelectRowAt indexPath: IndexPath) -> IndexPath? {
        interactor?.setCurrentEntity(index: indexPath.row)
        router!.updateDetailVC()
        return indexPath
    }

    
    /*
     // Override to support conditional editing of the table view.
     override func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool {
     // Return false if you do not want the specified item to be editable.
     return true
     }
     */
    
    /*
     // Override to support editing the table view.
     override func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCellEditingStyle, forRowAt indexPath: IndexPath) {
     if editingStyle == .delete {
     // Delete the row from the data source
     tableView.deleteRows(at: [indexPath], with: .fade)
     } else if editingStyle == .insert {
     // Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view
     }
     }
     */
    
    /*
     // Override to support rearranging the table view.
     override func tableView(_ tableView: UITableView, moveRowAt fromIndexPath: IndexPath, to: IndexPath) {
     
     }
     */
    
    /*
     // Override to support conditional rearranging of the table view.
     override func tableView(_ tableView: UITableView, canMoveRowAt indexPath: IndexPath) -> Bool {
     // Return false if you do not want the item to be re-orderable.
     return true
     }
     */
    
    /*
     // MARK: - Navigation
     
     // In a storyboard-based application, you will often want to do a little preparation before navigation
     override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
     // Get the new view controller using segue.destination.
     // Pass the selected object to the new view controller.
     }
     */
}
