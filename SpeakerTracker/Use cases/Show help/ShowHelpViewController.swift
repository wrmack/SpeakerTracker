//
//  ShowHelpViewController.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 28/10/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ShowHelpDisplayLogic: class {
    func displayAttributedString(viewModel: ShowHelp.Help.ViewModel)
}



class ShowHelpViewController: UIViewController, ShowHelpDisplayLogic {
    var interactor: ShowHelpBusinessLogic?
    var router: (NSObjectProtocol & ShowHelpRoutingLogic & ShowHelpDataPassing)?
    var source: TrackSpeakersViewController?
    var textView: UITextView?
    
    
    // MARK: Object lifecycle
    
    convenience init(source: TrackSpeakersViewController) {
        self.init()
        self.source = source
    }

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }


    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = ShowHelpInteractor()
        let presenter = ShowHelpPresenter()
        let router = ShowHelpRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }


    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        view.isOpaque = true
        view.backgroundColor = UIColor(white: 0.9, alpha: 1.0)
        textView = UITextView(frame: view.bounds)
        textView?.backgroundColor = UIColor.clear
        view.addSubview(textView!)
        textView!.translatesAutoresizingMaskIntoConstraints = false
        textView!.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20).isActive = true
        textView!.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20).isActive = true
        textView!.topAnchor.constraint(equalTo:view.topAnchor, constant: 80).isActive = true
        textView!.bottomAnchor.constraint(equalTo:view.bottomAnchor, constant: -50).isActive = true
        
        let closeButton = UIButton(type: .system)
        closeButton.setTitle("X", for: .normal)
        closeButton.titleLabel?.font = UIFont.boldSystemFont(ofSize: 28)
        closeButton.addTarget(self, action: #selector(closeButtonPressed(_:)), for: .touchUpInside)
        view.addSubview(closeButton)
        closeButton.translatesAutoresizingMaskIntoConstraints = false
        closeButton.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20).isActive = true
        closeButton.topAnchor.constraint(equalTo:view.topAnchor, constant: 20).isActive = true
        
        fetchAttributedString()
    }
    
    override func viewDidLayoutSubviews() {
        textView?.setContentOffset(CGPoint(x: 0, y: 0), animated: true)
    }

    
    // MARK: VIP

    func fetchAttributedString() {
        let request = ShowHelp.Help.Request()
        interactor?.fetchAttributedString(request: request)
    }


    func displayAttributedString(viewModel: ShowHelp.Help.ViewModel) {
        textView?.attributedText = viewModel.attString
    }
    
    
    // MARK: Button actions
    
    @objc func closeButtonPressed(_ sender: UIButton) {
        router?.returnFromHelp()
    }
}
