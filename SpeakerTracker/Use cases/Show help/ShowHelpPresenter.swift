//
//  ShowHelpPresenter.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 28/10/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ShowHelpPresentationLogic {
    func presentAttributedString(response: ShowHelp.Help.Response)
}

class ShowHelpPresenter: ShowHelpPresentationLogic {
    weak var viewController: ShowHelpDisplayLogic?

    // MARK: - VIP

    func presentAttributedString(response: ShowHelp.Help.Response) {
        
        let attString = NSMutableAttributedString()
        
        var heading1Atts = HelpAttributes().heading1
        heading1Atts[NSAttributedString.Key.paragraphStyle] = HelpParaStyle().leftWithSpacingBefore
        
        var heading2Atts = HelpAttributes().heading2
        heading2Atts[NSAttributedString.Key.paragraphStyle] = HelpParaStyle().leftWithSpacingBefore
        
        var normAtts = HelpAttributes().normal
        normAtts[NSAttributedString.Key.paragraphStyle] = HelpParaStyle().leftWithSpacingBefore
        
        var normAttsWithoutSpacing = HelpAttributes().normal
        normAttsWithoutSpacing[NSAttributedString.Key.paragraphStyle] = HelpParaStyle().left
        
        var boldnormAtts = HelpAttributes().normalBold
        boldnormAtts[NSAttributedString.Key.paragraphStyle] = HelpParaStyle().leftWithSpacingBefore
        
        attString.append(NSAttributedString(string: "First time using the app\n", attributes: heading1Atts))
        attString.append(NSAttributedString(string: """
Go to setup and create an entity.  Then create members and meeting groups for that entity.\n
""", attributes: normAtts))
         attString.append(NSAttributedString(string: """
Example:\n
""", attributes: boldnormAtts))
        attString.append(NSAttributedString(string: """
Entity:  My council
Members:  Cr Member One, Cr Member Two, Cr Member Three
Meeting groups:  Full council, Committee One, Committee Two\n
""", attributes: normAttsWithoutSpacing))
        
        attString.append(NSAttributedString(string: "Main screen\n", attributes: heading1Atts))
        attString.append(NSAttributedString(string: "The lists\n", attributes: heading2Atts))
        attString.append(NSAttributedString(string: """
Remaining list\n
""", attributes: boldnormAtts))
        
        attString.append(NSAttributedString(string: """
All members start here, in alphabetical order of last name.\n
""", attributes: normAtts))
        
        attString.append(NSAttributedString(string: """
Waiting list\n
""", attributes: boldnormAtts))
        
        attString.append(NSAttributedString(string: """
Members who have signalled their wish to speak are listed here.\
The meeting chair can see who is next to speak.  \
Members can be re-ordered by pressing the control at the top of the list and moving rows.\n
""", attributes: normAtts))
        
        attString.append(NSAttributedString(string: """
Speaking list\n
""", attributes: boldnormAtts))
        
        attString.append(NSAttributedString(string: """
Shows the members who have previously spoken in the debate and the member currently speaking.\n
""", attributes: normAtts))
        
        attString.append(NSAttributedString(string: """
Moving a member from one list another\n
""", attributes: boldnormAtts))
        
        attString.append(NSAttributedString(string: """
Either swipe the member name or press the arrow. A member in the Speaking List cannot be moved between lists once the timer for the member is started.\n
""", attributes: normAtts))
        
        attString.append(NSAttributedString(string: """
Debates\n
""", attributes: heading2Atts))
 
        attString.append(NSAttributedString(string:"""
Speaking rules\n
""", attributes: boldnormAtts))
 
        attString.append(NSAttributedString(string:"""
This app is based on the rule that speakers in a debate to a motion only speak once.  A speaker may propose an amendment to a motion \
being debated.  All members, whether they have already spoken to the main (original) motion or not, may speak to the amendment.  \
Once the amendment is dispensed with, only those speakers who have not already spoken to the main motion may continue to speak to it. \
If your meeting rules allow speakers to speak more than once, and you wish to time a speaker who has already spoken once, \
long-press on the speaker and select the menu option to speak again. \n
""", attributes: normAtts))
        
        attString.append(NSAttributedString(string:"""
Amendments\n
""", attributes: boldnormAtts))
        
        attString.append(NSAttributedString(string:"""
If the member who is speaking moves an amendment, long press the member when finished speaking to commence \
a debate on the amendment. All other members may speak to the amendment and are returned to the Remaining list. \
Long press the final speaker to the amendment to close the amendment debate.  The main debate resumes. \
Those members who have not already spoken in the main debate may speak. \n
""", attributes: normAtts))
        
        attString.append(NSAttributedString(string:"""
Timing speeches\n
""", attributes: heading2Atts))
        
        attString.append(NSAttributedString(string: """
Timer\n
""", attributes: boldnormAtts))
        
        attString.append(NSAttributedString(string: """
There is a clock at the top of the screen.  Pressing the full screen button shows a larger clock.  Both clocks are synced.  They \
display the same timing action.  When you press the play button next to a speaker's name, the play button is replaced by a clock.
To time a speaker you have options.
Press the play button for the top clock when the speaker commences.  The stop button stops the timer and when the play button \
is pressed again it starts from zero.  The pause button pauses the timer and when the play button is pressed again it resumes \
from where it was paused.
To retain a display of each speaker's time, press the play button fnext to the speaker's name.  The play button will be replaced by the time.  \
Press the clock next to speaker again to stop the timer, \
or press the stop button of the top clock.  The clock next to the speaker's name retains the time and is disabled so it cannot be restarted.\n
""", attributes: normAtts))

        attString.append(NSAttributedString(string:"""
Recording debates\n
""", attributes: heading2Atts))
        
        attString.append(NSAttributedString(string: """
Meeting events\n
""", attributes: boldnormAtts))
        
        attString.append(NSAttributedString(string: """
When a meeting group comes together to have a meeting, we call this a 'meeting event'.  For the purposes of this app, a meeting event \
includes the name of the entity, the name of the group that is meeting (the 'meeting group'), the members of the meeting group and the date and \
time of the meeting.
You can record and save all debates that take place at a meeting event as below.

""", attributes: normAtts))

        attString.append(NSAttributedString(string: """
Create the meeting event\n
""", attributes: boldnormAtts))
        
        attString.append(NSAttributedString(string: """
    • Go to 'Setup'
    • Select the 'Events' tab
    • Select the 'Entity'
    • Select the 'Meeting group'
    • Press the '+' button
    • Set the date and time, press 'Save'

""", attributes: normAtts))
        
        attString.append(NSAttributedString(string: """
Setup the meeting to record the meeting event\n
""", attributes: boldnormAtts))

        attString.append(NSAttributedString(string: """
    • Go to 'Speakers' (the main window for tracking speakers at a meeting)
    • Open the slide-out panel 'Meeting setup'
    • Ensure 'Entity' and 'Meeting group' are correct
    • Enable 'Create a record of this meeting'
    • Select the 'Meeting event' from the pop-up
    • Close the slide-out panel
Note: the pop-up will display only the meeting events for the selected Entity / Meeting group
A red recording icon will now be visible.

""", attributes: normAtts))
        
        attString.append(NSAttributedString(string: """
Record the meeting event\n
""", attributes: boldnormAtts))
        
        attString.append(NSAttributedString(string: """
Press the pencil icon at the top of the 'Spoken / Speaking' table to add a note for the current debate, \
for example to identify which item in the agenda the debate relates to.
After each debate is completed, press the 'Save debate' button to save the debate and start a new one.
When the meeting event is over, save the final debate and, in the slide-out panel, turn off the switch 'Create a record of this meeting'.

""", attributes: normAtts))
        
        attString.append(NSAttributedString(string: "Setup\n", attributes: heading1Atts))
        
        attString.append(NSAttributedString(string: """
Entities\n
""", attributes: boldnormAtts))

        attString.append(NSAttributedString(string: """
Add an entity and give it a name.  You can also edit the name of an existing entity.\n
""", attributes: normAtts))
        
        attString.append(NSAttributedString(string: """
Members\n
""", attributes: boldnormAtts))
        
        attString.append(NSAttributedString(string: """
Select an entity and add members, or edit existing members.\n
""", attributes: normAtts))
        
        attString.append(NSAttributedString(string: """
Meeting groups\n
""", attributes: boldnormAtts))
        
        attString.append(NSAttributedString(string: """
Select an entity and add meeting groups.  For each meeting group assign members from the entity's members.  \
You can also edit existing meeting groups.\n
""", attributes: normAtts))
        
        
        attString.append(NSAttributedString(string: """
Events\n
""", attributes: boldnormAtts))
        
        attString.append(NSAttributedString(string: """
Select an entity and a meeting group and create a meeting event which can be used when recording debates.  \
You can also edit existing events.\n
""", attributes: normAtts))
        
        attString.append(NSAttributedString(string: "Reports\n", attributes: heading1Atts))
        
        attString.append(NSAttributedString(string: """
Select an entity and meeting group to view reports of meeting events that have been recorded. \
Select a report to view it.  You are able to airdrop it, email it, save it, print it or open it in another app.\n
""", attributes: normAtts))
        
        attString.append(NSAttributedString(string: "App info\n", attributes: heading1Atts))
        
        attString.append(NSAttributedString(string: """
Source code: https://github.com/wrmack/SpeakerTracker
Developer:  Warwick McNaughton, warwick.mcnaughton@gmail.com \n
""", attributes: normAtts))

        attString.append(NSAttributedString(string: """
Privacy statement\n
""", attributes: boldnormAtts))
        
        attString.append(NSAttributedString(string: """
The app does not use personal information for any purpose other than the purpose of tracking speakers at meetings and keeping a record of this. \
The personal information used for tacking speakers comprises members' names and speaking times.
""", attributes: normAtts))
        
        let viewModel = ShowHelp.Help.ViewModel(attString: attString)
        viewController?.displayAttributedString(viewModel: viewModel)
    }
}
