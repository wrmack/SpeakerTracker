//
//  ConvertToPdfInteractor.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 28/09/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

/*
 https://pspdfkit.com/blog/2019/converting-attributed-string-to-pdf/
 
 
 */

import UIKit
import CoreGraphics


protocol ConvertToPdfBusinessLogic {
    func convertToPdf(callback: @escaping ()->())
}

protocol ConvertToPdfDataStore {
    var attText: NSAttributedString? {get set}
    var pdfUrl: URL? {get set}
}


class ConvertToPdfInteractor: UIPrintPageRenderer, ConvertToPdfBusinessLogic, ConvertToPdfDataStore {
    var attText: NSAttributedString?
    var pdfUrl: URL?
    let pageSize = CGSize(width: 595.2, height: 841.8)
    
    override var paperRect: CGRect {
        return CGRect(origin: .zero, size: pageSize)
    }
    
    override var printableRect: CGRect {
        let pageMargin: CGFloat = 40
        return paperRect.insetBy(dx: pageMargin, dy: pageMargin)
    }
    
    
    
    func convertToPdf(callback: @escaping (()->())) {
        let tempDir = FileManager.default.temporaryDirectory
        pdfUrl = tempDir.appendingPathComponent("Meeting.pdf")
        let renderer = UIGraphicsPDFRenderer(bounds:paperRect)
        prepare(forDrawingPages: NSMakeRange(0, numberOfPages))
        
        do {
            try renderer.writePDF(to: pdfUrl!, withActions: { context in
                let printFormatter = UISimpleTextPrintFormatter(attributedText: attText!)
                addPrintFormatter(printFormatter, startingAtPageAt: 0)
                
                for pageIndex in 0..<numberOfPages {
                    context.beginPage()
                    drawPage(at: pageIndex, in: context.pdfContextBounds)
                }
                callback()
            })
        } catch {
            print(error)
        }
    }
}

