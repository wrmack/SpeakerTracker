//
//  DisplayReportsInteractor.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 22/09/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DisplayReportsBusinessLogic {
    func getReports(request: DisplayReports.Reports.Request)
    func setSelectedItem(item: Int)
}

protocol DisplayReportsDataStore {
    var meetingGroup: MeetingGroup? { get set}
    var selectedItem: Event? {get set}
}

class DisplayReportsInteractor: DisplayReportsBusinessLogic, DisplayReportsDataStore {
    var presenter: DisplayReportsPresentationLogic?
    var meetingGroup: MeetingGroup?
    var events: [Event]?
    var selectedItem: Event?

    // MARK: - VIP
    
    /*
     The meeting group was set through data-passing.
     Gets all events for the meeting group.
     Passes these to the presenter.
     */
    func getReports(request: DisplayReports.Reports.Request) {
        events = [Event]()
        let fileManager = FileManager.default
        guard let docDirectory = fileManager.urls(for: .documentDirectory, in: .userDomainMask).first else {
            print("DisplayReportsInteractor: getReports: error: Document directory not found")
            return
        }
        do {
            let fileURLs = try fileManager.contentsOfDirectory(at: docDirectory, includingPropertiesForKeys: nil)
            for url in fileURLs {
                if url.pathExtension == "evt" {
                    let eventDoc = EventDocument(fileURL: url)
                    eventDoc.open(completionHandler: { success in
                        if !success {
                            print("DisplayReportsInteractor: getReports: error opening EntityDocument")
                        }
                        else {
                            eventDoc.close(completionHandler: { success in
                                guard var event = eventDoc.event else {
                                    print("DisplayReportsInteractor: getReports: event is nil")
                                    return
                                }
                                if event.filename == nil {
                                    let urlWithoutExt = url.deletingPathExtension()
                                    event.filename = urlWithoutExt.lastPathComponent
                                }
                                if event.meetingGroup == self.meetingGroup {
                                    self.events!.append(event)
                                }
                                let response = DisplayReports.Reports.Response(events: self.events)
                                self.presenter?.presentReports(response: response)
                            })
                        }
                    })
                }
            }
            
        } catch {
            print("DisplayReportsInteractor: error while enumerating files \(docDirectory.path): \(error.localizedDescription)")
        }
    }
    
    func setSelectedItem(item: Int) {
        selectedItem = events![item]
    }
}
