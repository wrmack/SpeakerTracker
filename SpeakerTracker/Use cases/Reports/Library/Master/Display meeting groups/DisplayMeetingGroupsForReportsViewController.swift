//
//  DisplayMeetingGroupsForReportsViewController.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 22/09/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DisplayMeetingGroupsForReportsDisplayLogic: class {
    func displayMeetingGroups(viewModel: DisplayMeetingGroupsForReports.MeetingGroups.ViewModel)
}

class DisplayMeetingGroupsForReportsViewController: UITableViewController, DisplayMeetingGroupsForReportsDisplayLogic,  EntitiesPopUpViewControllerDelegate {
    
    var interactor: DisplayMeetingGroupsForReportsBusinessLogic?
    var router: (NSObjectProtocol & DisplayMeetingGroupsForReportsRoutingLogic & DisplayMeetingGroupsForReportsDataPassing)?
    var meetingGroupNames = [String]()
    var meetingGroupSelected = false
    
    @IBOutlet weak var entityButton: UIButton!
    
    
    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = DisplayMeetingGroupsForReportsInteractor()
        let presenter = DisplayMeetingGroupsForReportsPresenter()
        let router = DisplayMeetingGroupsForReportsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
  
  // MARK: View lifecycle
  
    override func viewDidLoad() {
        super.viewDidLoad()
//        let splitVC = splitViewController
//        let detailVC = splitVC?.viewControllers[1] as! DisplayReportsViewController
//        detailVC.delegate = self
    }

    
    @IBAction func entityButtonPressed(_ sender: UIButton) {
        let entityPopUpController = DisplayEntitiesPopUpViewController(nibName: nil, bundle: nil)
        entityPopUpController.modalPresentationStyle = .popover
        present(entityPopUpController, animated: true, completion: nil)
        
        let popoverController = entityPopUpController.popoverPresentationController
        popoverController!.delegate = self as? UIPopoverPresentationControllerDelegate
        popoverController!.sourceView = sender.superview!
        popoverController!.sourceRect = sender.frame
        popoverController!.permittedArrowDirections = .up
        entityPopUpController.delegate = self
        entityPopUpController.reloadData()
    }
    
    
    // MARK: - VIP
    
    func fetchMeetingGroups(entity: Entity) {
        let request = DisplayMeetingGroupsForReports.MeetingGroups.Request(entity: entity)
        interactor?.fetchMeetingGroups(request: request)
    }
    
    
    func displayMeetingGroups(viewModel: DisplayMeetingGroupsForReports.MeetingGroups.ViewModel) {
        meetingGroupNames = viewModel.meetingGroupNames!
        tableView.reloadData()
        interactor?.setCurrentMeetingGroup(index: 0)
        router!.updateDetailVC()
    }
    
    
    // MARK: - UITableViewDataSource methods
    
    override func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    
    /*
     Return number of rows equal to number of meeting groups.
     If there are no names, return 1 row so can display a message.
     */
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if meetingGroupNames.count == 0 && meetingGroupSelected {
            return 1
        }
        return meetingGroupNames.count
    }
    
    
    /*
     If there are no members in the selected entity, display a prompt on the first line.
     Otherwise display the members
     */
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "ReportMeetingGroup", for: indexPath)
        if meetingGroupNames.count == 0 && meetingGroupSelected {
            cell.textLabel?.text = "No meeting groups"
            cell.textLabel?.textAlignment = .center
            cell.textLabel?.textColor = UIColor(white: 0.5, alpha: 0.7)
        }
        else {
            cell.textLabel?.text = meetingGroupNames[indexPath.row]
            cell.textLabel?.textAlignment = .left
            cell.textLabel?.textColor = UIColor.black
        }
        return cell
    }
    
    
    // MARK: - UITableViewDelegate methods
    
    override func tableView(_ tableView: UITableView, willSelectRowAt indexPath: IndexPath) -> IndexPath? {
        interactor?.setCurrentMeetingGroup(index: indexPath.row)
        router!.updateDetailVC()
        return indexPath
    }
    
    
    // MARK: EntitiesPopUpViewControllerDelegate methods
    
    func didSelectEntityInPopUpViewController(_ viewController: DisplayEntitiesPopUpViewController, entity: Entity) {
        dismiss(animated: false, completion: nil)
        entityButton!.setTitle(entity.name, for: .normal)
        entityButton!.setTitleColor(UIColor.black, for: .normal)
        entityButton!.titleLabel?.textAlignment = .center
        dismiss(animated: true, completion: nil)
        meetingGroupSelected = true
        fetchMeetingGroups(entity: entity)
    }
    
    // MARK: DisplayReportsViewControllerDelegate methods
    
//    func didSelectEntityInDisplayReportsController(entity: Entity) {
//        dismiss(animated: true, completion: nil)
//        meetingGroupSelected = true
//        fetchMeetingGroups(entity: entity)
//    }
}
