//
//  DisplayEventsPopUpInteractor.swift
//  SpeakerTracker
//
//  Created by Warwick McNaughton on 15/09/18.
//  Copyright (c) 2018 Warwick McNaughton. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DisplayEventsPopUpBusinessLogic {
    func fetchEvents(request: DisplayEventsPopUp.Events.Request)
}

protocol DisplayEventsPopUpDataStore {
  //var name: String { get set }
}

class DisplayEventsPopUpInteractor: DisplayEventsPopUpBusinessLogic, DisplayEventsPopUpDataStore {
    var presenter: DisplayEventsPopUpPresentationLogic?
    var event: Event?
    var events: [Event]?
    var currentEntity: Entity?
    var currentMeetingGroup: MeetingGroup?
    var currentEvent: Event?
    var currentDebate: Debate?
    var currentMemberSpeaking: Member?
    

    func fetchEvents(request: DisplayEventsPopUp.Events.Request) {
        events = [Event]()
        let fileManager = FileManager.default
        guard let docDirectory = fileManager.urls(for: .documentDirectory, in: .userDomainMask).first else {
            print("DisplayEventsPopUpInteractor: fetchEvents: error: Document directory not found")
            return
        }
        do {
            let fileURLs = try fileManager.contentsOfDirectory(at: docDirectory, includingPropertiesForKeys: nil)
            for url in fileURLs {
                if url.pathExtension == "evt" {
                    let eventDoc = EventDocument(fileURL: url)
                    eventDoc.open(completionHandler: { success in
                        if !success {
                            print("DisplayEventsPopUpInteractor: fetchEvents: error opening EntityDocument")
                        }
                        else {
                            eventDoc.close(completionHandler: { success in
                                guard var event = eventDoc.event else {
                                    print("DisplayEventsPopUpInteractor: fetchEvents: event is nil")
                                    return
                                }
                                if event.filename == nil {
                                    let urlWithoutExt = url.deletingPathExtension()
                                    event.filename = urlWithoutExt.lastPathComponent
                                }
                                self.events!.append(event)
                                let response = DisplayEventsPopUp.Events.Response(events: self.events)
                                self.presenter?.presentEvents(response: response) 
                            })
                        }
                    })
                }
            }
            
        } catch {
            print("DisplayEventsPopUpInteractor: error while enumerating files \(docDirectory.path): \(error.localizedDescription)")
        }
    }
    
    
    func getEvent(index: Int) -> Event {
        return events![index]
    }
}
